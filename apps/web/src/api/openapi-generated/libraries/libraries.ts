/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import { apiInstance } from '../../api-instance.ts';
import type { BodyType, ErrorType } from '../../api-instance.ts';
import type {
    DeleteApiLibrariesId204,
    DeleteApiLibrariesId401,
    DeleteApiLibrariesId403,
    DeleteApiLibrariesId404,
    DeleteApiLibrariesId422,
    DeleteApiLibrariesId500,
    GetApiLibraries200,
    GetApiLibraries401,
    GetApiLibraries403,
    GetApiLibraries404,
    GetApiLibraries422,
    GetApiLibraries500,
    GetApiLibrariesId200,
    GetApiLibrariesId401,
    GetApiLibrariesId403,
    GetApiLibrariesId404,
    GetApiLibrariesId422,
    GetApiLibrariesId500,
    GetApiLibrariesParams,
    PostApiLibraries201,
    PostApiLibraries400,
    PostApiLibraries401,
    PostApiLibraries403,
    PostApiLibraries404,
    PostApiLibraries409,
    PostApiLibraries422,
    PostApiLibraries500,
    PostApiLibrariesBody,
    PutApiLibrariesId200,
    PutApiLibrariesId400,
    PutApiLibrariesId401,
    PutApiLibrariesId403,
    PutApiLibrariesId404,
    PutApiLibrariesId422,
    PutApiLibrariesId500,
    PutApiLibrariesIdBody,
} from '../audioling-openapi-client.schemas.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all libraries
 */
export const getApiLibraries = (
    params: GetApiLibrariesParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraries200>(
        { method: 'GET', params, signal, url: `/api/libraries` },
        options,
    );
};

export const getGetApiLibrariesQueryKey = (params: GetApiLibrariesParams) => {
    return [`/api/libraries`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibrariesQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraries>>,
    TError = ErrorType<
        | GetApiLibraries401
        | GetApiLibraries403
        | GetApiLibraries404
        | GetApiLibraries422
        | GetApiLibraries500
    >,
>(
    params: GetApiLibrariesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraries>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibrariesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraries>>> = ({ signal }) =>
        getApiLibraries(params, requestOptions, signal);

    return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraries>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibrariesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLibraries>>>;
export type GetApiLibrariesQueryError = ErrorType<
    | GetApiLibraries401
    | GetApiLibraries403
    | GetApiLibraries404
    | GetApiLibraries422
    | GetApiLibraries500
>;

export function useGetApiLibraries<
    TData = Awaited<ReturnType<typeof getApiLibraries>>,
    TError = ErrorType<
        | GetApiLibraries401
        | GetApiLibraries403
        | GetApiLibraries404
        | GetApiLibraries422
        | GetApiLibraries500
    >,
>(
    params: GetApiLibrariesParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraries>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraries>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraries<
    TData = Awaited<ReturnType<typeof getApiLibraries>>,
    TError = ErrorType<
        | GetApiLibraries401
        | GetApiLibraries403
        | GetApiLibraries404
        | GetApiLibraries422
        | GetApiLibraries500
    >,
>(
    params: GetApiLibrariesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraries>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraries>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraries<
    TData = Awaited<ReturnType<typeof getApiLibraries>>,
    TError = ErrorType<
        | GetApiLibraries401
        | GetApiLibraries403
        | GetApiLibraries404
        | GetApiLibraries422
        | GetApiLibraries500
    >,
>(
    params: GetApiLibrariesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraries>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get all libraries
 */

export function useGetApiLibraries<
    TData = Awaited<ReturnType<typeof getApiLibraries>>,
    TError = ErrorType<
        | GetApiLibraries401
        | GetApiLibraries403
        | GetApiLibraries404
        | GetApiLibraries422
        | GetApiLibraries500
    >,
>(
    params: GetApiLibrariesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraries>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibrariesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Create a library
 * @summary Create library
 */
export const postApiLibraries = (
    postApiLibrariesBody: BodyType<PostApiLibrariesBody>,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<PostApiLibraries201>(
        {
            data: postApiLibrariesBody,
            headers: { 'Content-Type': 'application/json' },
            method: 'POST',
            url: `/api/libraries`,
        },
        options,
    );
};

export const getPostApiLibrariesMutationOptions = <
    TError = ErrorType<
        | PostApiLibraries400
        | PostApiLibraries401
        | PostApiLibraries403
        | PostApiLibraries404
        | PostApiLibraries409
        | PostApiLibraries422
        | PostApiLibraries500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraries>>,
        TError,
        { data: BodyType<PostApiLibrariesBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiLibraries>>,
    TError,
    { data: BodyType<PostApiLibrariesBody> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraries>>,
        { data: BodyType<PostApiLibrariesBody> }
    > = (props) => {
        const { data } = props ?? {};

        return postApiLibraries(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiLibrariesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraries>>
>;
export type PostApiLibrariesMutationBody = BodyType<PostApiLibrariesBody>;
export type PostApiLibrariesMutationError = ErrorType<
    | PostApiLibraries400
    | PostApiLibraries401
    | PostApiLibraries403
    | PostApiLibraries404
    | PostApiLibraries409
    | PostApiLibraries422
    | PostApiLibraries500
>;

/**
 * @summary Create library
 */
export const usePostApiLibraries = <
    TError = ErrorType<
        | PostApiLibraries400
        | PostApiLibraries401
        | PostApiLibraries403
        | PostApiLibraries404
        | PostApiLibraries409
        | PostApiLibraries422
        | PostApiLibraries500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraries>>,
        TError,
        { data: BodyType<PostApiLibrariesBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiLibraries>>,
    TError,
    { data: BodyType<PostApiLibrariesBody> },
    TContext
> => {
    const mutationOptions = getPostApiLibrariesMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get library by id
 */
export const getApiLibrariesId = (
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibrariesId200>(
        { method: 'GET', signal, url: `/api/libraries/${id}` },
        options,
    );
};

export const getGetApiLibrariesIdQueryKey = (id: string) => {
    return [`/api/libraries/${id}`] as const;
};

export const getGetApiLibrariesIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibrariesId>>,
    TError = ErrorType<
        | GetApiLibrariesId401
        | GetApiLibrariesId403
        | GetApiLibrariesId404
        | GetApiLibrariesId422
        | GetApiLibrariesId500
    >,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibrariesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibrariesIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibrariesId>>> = ({ signal }) =>
        getApiLibrariesId(id, requestOptions, signal);

    return { enabled: !!id, queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibrariesId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibrariesIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibrariesId>>
>;
export type GetApiLibrariesIdQueryError = ErrorType<
    | GetApiLibrariesId401
    | GetApiLibrariesId403
    | GetApiLibrariesId404
    | GetApiLibrariesId422
    | GetApiLibrariesId500
>;

export function useGetApiLibrariesId<
    TData = Awaited<ReturnType<typeof getApiLibrariesId>>,
    TError = ErrorType<
        | GetApiLibrariesId401
        | GetApiLibrariesId403
        | GetApiLibrariesId404
        | GetApiLibrariesId422
        | GetApiLibrariesId500
    >,
>(
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibrariesId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibrariesId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibrariesId<
    TData = Awaited<ReturnType<typeof getApiLibrariesId>>,
    TError = ErrorType<
        | GetApiLibrariesId401
        | GetApiLibrariesId403
        | GetApiLibrariesId404
        | GetApiLibrariesId422
        | GetApiLibrariesId500
    >,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibrariesId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibrariesId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibrariesId<
    TData = Awaited<ReturnType<typeof getApiLibrariesId>>,
    TError = ErrorType<
        | GetApiLibrariesId401
        | GetApiLibrariesId403
        | GetApiLibrariesId404
        | GetApiLibrariesId422
        | GetApiLibrariesId500
    >,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibrariesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get library by id
 */

export function useGetApiLibrariesId<
    TData = Awaited<ReturnType<typeof getApiLibrariesId>>,
    TError = ErrorType<
        | GetApiLibrariesId401
        | GetApiLibrariesId403
        | GetApiLibrariesId404
        | GetApiLibrariesId422
        | GetApiLibrariesId500
    >,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibrariesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibrariesIdQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Update a library
 * @summary Update library by id
 */
export const putApiLibrariesId = (
    id: string,
    putApiLibrariesIdBody: BodyType<PutApiLibrariesIdBody>,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<PutApiLibrariesId200>(
        {
            data: putApiLibrariesIdBody,
            headers: { 'Content-Type': 'application/json' },
            method: 'PUT',
            url: `/api/libraries/${id}`,
        },
        options,
    );
};

export const getPutApiLibrariesIdMutationOptions = <
    TError = ErrorType<
        | PutApiLibrariesId400
        | PutApiLibrariesId401
        | PutApiLibrariesId403
        | PutApiLibrariesId404
        | PutApiLibrariesId422
        | PutApiLibrariesId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiLibrariesId>>,
        TError,
        { data: BodyType<PutApiLibrariesIdBody>; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiLibrariesId>>,
    TError,
    { data: BodyType<PutApiLibrariesIdBody>; id: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiLibrariesId>>,
        { data: BodyType<PutApiLibrariesIdBody>; id: string }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiLibrariesId(id, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiLibrariesIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof putApiLibrariesId>>
>;
export type PutApiLibrariesIdMutationBody = BodyType<PutApiLibrariesIdBody>;
export type PutApiLibrariesIdMutationError = ErrorType<
    | PutApiLibrariesId400
    | PutApiLibrariesId401
    | PutApiLibrariesId403
    | PutApiLibrariesId404
    | PutApiLibrariesId422
    | PutApiLibrariesId500
>;

/**
 * @summary Update library by id
 */
export const usePutApiLibrariesId = <
    TError = ErrorType<
        | PutApiLibrariesId400
        | PutApiLibrariesId401
        | PutApiLibrariesId403
        | PutApiLibrariesId404
        | PutApiLibrariesId422
        | PutApiLibrariesId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiLibrariesId>>,
        TError,
        { data: BodyType<PutApiLibrariesIdBody>; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiLibrariesId>>,
    TError,
    { data: BodyType<PutApiLibrariesIdBody>; id: string },
    TContext
> => {
    const mutationOptions = getPutApiLibrariesIdMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Delete library by id
 */
export const deleteApiLibrariesId = (id: string, options?: SecondParameter<typeof apiInstance>) => {
    return apiInstance<DeleteApiLibrariesId204>(
        { method: 'DELETE', url: `/api/libraries/${id}` },
        options,
    );
};

export const getDeleteApiLibrariesIdMutationOptions = <
    TError = ErrorType<
        | DeleteApiLibrariesId401
        | DeleteApiLibrariesId403
        | DeleteApiLibrariesId404
        | DeleteApiLibrariesId422
        | DeleteApiLibrariesId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibrariesId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiLibrariesId>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibrariesId>>,
        { id: string }
    > = (props) => {
        const { id } = props ?? {};

        return deleteApiLibrariesId(id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiLibrariesIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibrariesId>>
>;

export type DeleteApiLibrariesIdMutationError = ErrorType<
    | DeleteApiLibrariesId401
    | DeleteApiLibrariesId403
    | DeleteApiLibrariesId404
    | DeleteApiLibrariesId422
    | DeleteApiLibrariesId500
>;

/**
 * @summary Delete library by id
 */
export const useDeleteApiLibrariesId = <
    TError = ErrorType<
        | DeleteApiLibrariesId401
        | DeleteApiLibrariesId403
        | DeleteApiLibrariesId404
        | DeleteApiLibrariesId422
        | DeleteApiLibrariesId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibrariesId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteApiLibrariesId>>,
    TError,
    { id: string },
    TContext
> => {
    const mutationOptions = getDeleteApiLibrariesIdMutationOptions(options);

    return useMutation(mutationOptions);
};
