/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
export type GetApiLibraryIdPlaylistsIdTracks500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsIdTracks404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsIdTracks403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsIdTracks401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsIdTracks200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdPlaylistsIdTracks200 = {
    data: GetApiLibraryIdPlaylistsIdTracks200DataItem[];
    meta: GetApiLibraryIdPlaylistsIdTracks200Meta;
};

export type GetApiLibraryIdPlaylistsIdTracks200DataItemItemType =
    (typeof GetApiLibraryIdPlaylistsIdTracks200DataItemItemType)[keyof typeof GetApiLibraryIdPlaylistsIdTracks200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsIdTracks200DataItemItemType = {
    track: 'track',
} as const;

export type GetApiLibraryIdPlaylistsIdTracks200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylistsIdTracks200DataItemExternal = { [key: string]: unknown | null };

export type GetApiLibraryIdPlaylistsIdTracks200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylistsIdTracks200DataItemAlbumArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylistsIdTracks200DataItem = {
    /** @nullable */
    album: string | null;
    albumArtists: GetApiLibraryIdPlaylistsIdTracks200DataItemAlbumArtistsItem[];
    /** @nullable */
    albumId: string | null;
    /** @nullable */
    artistId: string | null;
    /** @nullable */
    artistName: string | null;
    artists: GetApiLibraryIdPlaylistsIdTracks200DataItemArtistsItem[];
    /** @nullable */
    bitDepth: number | null;
    /** @nullable */
    bitRate: number | null;
    /** @nullable */
    bpm: number | null;
    /** @nullable */
    channelCount: number | null;
    /** @nullable */
    comment: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    discNumber: string | null;
    /** @nullable */
    discSubtitle: string | null;
    duration: number;
    external: GetApiLibraryIdPlaylistsIdTracks200DataItemExternal;
    /** @nullable */
    fileContainer: string | null;
    /** @nullable */
    fileName: string | null;
    /** @nullable */
    filePath: string | null;
    /** @nullable */
    fileSize: number | null;
    genres: GetApiLibraryIdPlaylistsIdTracks200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdPlaylistsIdTracks200DataItemItemType;
    libraryId: string;
    name: string;
    playlistTrackId: string;
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    rgAlbumGain: number | null;
    /** @nullable */
    rgAlbumPeak: number | null;
    /** @nullable */
    rgTrackGain: number | null;
    /** @nullable */
    rgTrackPeak: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackNumber: number | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    userPlayCount: number;
    /** @nullable */
    userRating: number | null;
};

export type GetApiLibraryIdPlaylistsIdTracksSortOrder =
    (typeof GetApiLibraryIdPlaylistsIdTracksSortOrder)[keyof typeof GetApiLibraryIdPlaylistsIdTracksSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsIdTracksSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdPlaylistsIdTracksSortBy =
    (typeof GetApiLibraryIdPlaylistsIdTracksSortBy)[keyof typeof GetApiLibraryIdPlaylistsIdTracksSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsIdTracksSortBy = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    bpm: 'bpm',
    channels: 'channels',
    comment: 'comment',
    duration: 'duration',
    genre: 'genre',
    id: 'id',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    recentlyAdded: 'recentlyAdded',
    recentlyPlayed: 'recentlyPlayed',
    releaseDate: 'releaseDate',
    year: 'year',
} as const;

export type GetApiLibraryIdPlaylistsIdTracksParams = {
    limit?: string;
    offset?: string;
    sortBy: GetApiLibraryIdPlaylistsIdTracksSortBy;
    sortOrder: GetApiLibraryIdPlaylistsIdTracksSortOrder;
};

export type DeleteApiLibraryIdPlaylistsId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsId204 = { [key: string]: unknown };

export type PutApiLibraryIdPlaylistsId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsId204 = { [key: string]: unknown };

export type PutApiLibraryIdPlaylistsIdBody = {
    description?: string;
    isPublic?: boolean;
    name?: string;
};

export type GetApiLibraryIdPlaylistsId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsId200Meta = { [key: string]: unknown };

export type GetApiLibraryIdPlaylistsId200 = {
    data: GetApiLibraryIdPlaylistsId200Data;
    meta: GetApiLibraryIdPlaylistsId200Meta;
};

export type GetApiLibraryIdPlaylistsId200DataItemType =
    (typeof GetApiLibraryIdPlaylistsId200DataItemType)[keyof typeof GetApiLibraryIdPlaylistsId200DataItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsId200DataItemType = {
    playlist: 'playlist',
} as const;

export type GetApiLibraryIdPlaylistsId200DataGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylistsId200Data = {
    createdDate: string;
    /** @nullable */
    description: string | null;
    /** @nullable */
    duration: number | null;
    genres: GetApiLibraryIdPlaylistsId200DataGenresItem[];
    id: string;
    /** @nullable */
    imageUrl: string | null;
    isPublic: boolean;
    itemType: GetApiLibraryIdPlaylistsId200DataItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    owner: string | null;
    /** @nullable */
    ownerId: string | null;
    /** @nullable */
    parentId: string | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackCount: number | null;
    updatedDate: string;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemove204 = { [key: string]: unknown };

export type PostApiLibraryIdPlaylistsFoldersFolderIdRemoveBody = {
    playlistIds: string[];
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFoldersFolderIdAdd204 = { [key: string]: unknown };

export type PostApiLibraryIdPlaylistsFoldersFolderIdAddBody = {
    playlistIds: string[];
};

export type DeleteApiLibraryIdPlaylistsFoldersFolderId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsFoldersFolderId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsFoldersFolderId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsFoldersFolderId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdPlaylistsFoldersFolderId204 = { [key: string]: unknown };

export type PutApiLibraryIdPlaylistsFoldersFolderId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsFoldersFolderId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsFoldersFolderId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsFoldersFolderId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsFoldersFolderId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibraryIdPlaylistsFoldersFolderId200 = {
    name: string;
    parentId?: string;
};

export type PutApiLibraryIdPlaylistsFoldersFolderIdBody = {
    name?: string;
    parentId?: string;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId200 = {
    data: GetApiLibraryIdPlaylistsFoldersFolderId200DataItem[];
    meta: GetApiLibraryIdPlaylistsFoldersFolderId200Meta;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId200DataItemItemType =
    (typeof GetApiLibraryIdPlaylistsFoldersFolderId200DataItemItemType)[keyof typeof GetApiLibraryIdPlaylistsFoldersFolderId200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsFoldersFolderId200DataItemItemType = {
    playlist: 'playlist',
} as const;

export type GetApiLibraryIdPlaylistsFoldersFolderId200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylistsFoldersFolderId200DataItem = {
    createdDate: string;
    /** @nullable */
    description: string | null;
    /** @nullable */
    duration: number | null;
    genres: GetApiLibraryIdPlaylistsFoldersFolderId200DataItemGenresItem[];
    id: string;
    /** @nullable */
    imageUrl: string | null;
    isPublic: boolean;
    itemType: GetApiLibraryIdPlaylistsFoldersFolderId200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    owner: string | null;
    /** @nullable */
    ownerId: string | null;
    /** @nullable */
    parentId: string | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackCount: number | null;
    updatedDate: string;
};

export type GetApiLibraryIdPlaylistsFoldersFolderIdSortOrder =
    (typeof GetApiLibraryIdPlaylistsFoldersFolderIdSortOrder)[keyof typeof GetApiLibraryIdPlaylistsFoldersFolderIdSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsFoldersFolderIdSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdPlaylistsFoldersFolderIdSortBy =
    (typeof GetApiLibraryIdPlaylistsFoldersFolderIdSortBy)[keyof typeof GetApiLibraryIdPlaylistsFoldersFolderIdSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsFoldersFolderIdSortBy = {
    createdAt: 'createdAt',
    name: 'name',
    updatedAt: 'updatedAt',
} as const;

export type GetApiLibraryIdPlaylistsFoldersFolderIdParams = {
    limit?: string;
    offset?: string;
    searchTerm?: string;
    sortBy: GetApiLibraryIdPlaylistsFoldersFolderIdSortBy;
    sortOrder: GetApiLibraryIdPlaylistsFoldersFolderIdSortOrder;
};

export type PostApiLibraryIdPlaylistsFolders500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFolders422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFolders403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylistsFolders401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostApiLibraryIdPlaylistsFolders201 = unknown | null;

export type PostApiLibraryIdPlaylistsFoldersBody = {
    name: string;
    parentId?: string;
};

export type GetApiLibraryIdPlaylistsFolders500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFolders422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFolders403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFolders401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylistsFolders200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdPlaylistsFolders200DataItem = {
    id: string;
    name: string;
    /** @nullable */
    parentId: string | null;
};

export type GetApiLibraryIdPlaylistsFolders200 = {
    data: GetApiLibraryIdPlaylistsFolders200DataItem[];
    meta: GetApiLibraryIdPlaylistsFolders200Meta;
};

export type GetApiLibraryIdPlaylistsFoldersSortOrder =
    (typeof GetApiLibraryIdPlaylistsFoldersSortOrder)[keyof typeof GetApiLibraryIdPlaylistsFoldersSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsFoldersSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdPlaylistsFoldersSortBy =
    (typeof GetApiLibraryIdPlaylistsFoldersSortBy)[keyof typeof GetApiLibraryIdPlaylistsFoldersSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsFoldersSortBy = {
    createdAt: 'createdAt',
    name: 'name',
    updatedAt: 'updatedAt',
} as const;

export type GetApiLibraryIdPlaylistsFoldersParams = {
    limit?: string;
    offset?: string;
    searchTerm?: string;
    sortBy: GetApiLibraryIdPlaylistsFoldersSortBy;
    sortOrder: GetApiLibraryIdPlaylistsFoldersSortOrder;
};

export type PostApiLibraryIdPlaylists500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylists422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylists403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylists401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdPlaylists201Meta = { [key: string]: unknown };

export type PostApiLibraryIdPlaylists201 = {
    data: PostApiLibraryIdPlaylists201Data;
    meta: PostApiLibraryIdPlaylists201Meta;
};

export type PostApiLibraryIdPlaylists201DataItemType =
    (typeof PostApiLibraryIdPlaylists201DataItemType)[keyof typeof PostApiLibraryIdPlaylists201DataItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiLibraryIdPlaylists201DataItemType = {
    playlist: 'playlist',
} as const;

export type PostApiLibraryIdPlaylists201DataGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type PostApiLibraryIdPlaylists201Data = {
    createdDate: string;
    /** @nullable */
    description: string | null;
    /** @nullable */
    duration: number | null;
    genres: PostApiLibraryIdPlaylists201DataGenresItem[];
    id: string;
    /** @nullable */
    imageUrl: string | null;
    isPublic: boolean;
    itemType: PostApiLibraryIdPlaylists201DataItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    owner: string | null;
    /** @nullable */
    ownerId: string | null;
    /** @nullable */
    parentId: string | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackCount: number | null;
    updatedDate: string;
};

export type PostApiLibraryIdPlaylistsBody = {
    description?: string;
    isPublic?: boolean;
    name: string;
};

export type GetApiLibraryIdPlaylists500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylists422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylists403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylists401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdPlaylists200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdPlaylists200DataItemItemType =
    (typeof GetApiLibraryIdPlaylists200DataItemItemType)[keyof typeof GetApiLibraryIdPlaylists200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylists200DataItemItemType = {
    playlist: 'playlist',
} as const;

export type GetApiLibraryIdPlaylists200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdPlaylists200DataItem = {
    createdDate: string;
    /** @nullable */
    description: string | null;
    /** @nullable */
    duration: number | null;
    genres: GetApiLibraryIdPlaylists200DataItemGenresItem[];
    id: string;
    /** @nullable */
    imageUrl: string | null;
    isPublic: boolean;
    itemType: GetApiLibraryIdPlaylists200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    owner: string | null;
    /** @nullable */
    ownerId: string | null;
    /** @nullable */
    parentId: string | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackCount: number | null;
    updatedDate: string;
};

export type GetApiLibraryIdPlaylists200 = {
    data: GetApiLibraryIdPlaylists200DataItem[];
    meta: GetApiLibraryIdPlaylists200Meta;
};

export type GetApiLibraryIdPlaylistsSortOrder =
    (typeof GetApiLibraryIdPlaylistsSortOrder)[keyof typeof GetApiLibraryIdPlaylistsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdPlaylistsSortBy =
    (typeof GetApiLibraryIdPlaylistsSortBy)[keyof typeof GetApiLibraryIdPlaylistsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdPlaylistsSortBy = {
    duration: 'duration',
    name: 'name',
    owner: 'owner',
    public: 'public',
    trackCount: 'trackCount',
    updatedAt: 'updatedAt',
} as const;

export type GetApiLibraryIdPlaylistsParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdPlaylistsSortBy;
    sortOrder: GetApiLibraryIdPlaylistsSortOrder;
};

export type GetApiLibraryIdImagesId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdImagesId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdImagesId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdImagesId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdImagesId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdImagesIdType =
    (typeof GetApiLibraryIdImagesIdType)[keyof typeof GetApiLibraryIdImagesIdType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdImagesIdType = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    genre: 'genre',
    library: 'library',
    playlist: 'playlist',
    track: 'track',
    user: 'user',
} as const;

export type GetApiLibraryIdImagesIdParams = {
    size?: string;
    type: GetApiLibraryIdImagesIdType;
};

export type GetApiLibraryIdGenres500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdGenres422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdGenres403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdGenres401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdGenres200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdGenres200DataItemItemType =
    (typeof GetApiLibraryIdGenres200DataItemItemType)[keyof typeof GetApiLibraryIdGenres200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdGenres200DataItemItemType = {
    genre: 'genre',
} as const;

export type GetApiLibraryIdGenres200DataItem = {
    /** @nullable */
    albumCount: number | null;
    id: string;
    itemType: GetApiLibraryIdGenres200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    trackCount: number | null;
};

export type GetApiLibraryIdGenres200 = {
    data: GetApiLibraryIdGenres200DataItem[];
    meta: GetApiLibraryIdGenres200Meta;
};

export type GetApiLibraryIdGenresSortOrder =
    (typeof GetApiLibraryIdGenresSortOrder)[keyof typeof GetApiLibraryIdGenresSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdGenresSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdGenresSortBy =
    (typeof GetApiLibraryIdGenresSortBy)[keyof typeof GetApiLibraryIdGenresSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdGenresSortBy = {
    albumCount: 'albumCount',
    name: 'name',
    trackCount: 'trackCount',
} as const;

export type GetApiLibraryIdGenresParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdGenresSortBy;
    sortOrder: GetApiLibraryIdGenresSortOrder;
};

export type DeleteApiLibraryIdAlbumArtistsIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumArtistsIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumArtistsIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumArtistsIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type DeleteApiLibraryIdAlbumArtistsIdFavorite204 = unknown | null;

export type PostApiLibraryIdAlbumArtistsIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumArtistsIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumArtistsIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumArtistsIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostApiLibraryIdAlbumArtistsIdFavorite204 = unknown | null;

export type GetApiLibraryIdAlbumArtistsIdTracks500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200 = {
    data: GetApiLibraryIdAlbumArtistsIdTracks200DataItem[];
    meta: GetApiLibraryIdAlbumArtistsIdTracks200Meta;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItemItemType =
    (typeof GetApiLibraryIdAlbumArtistsIdTracks200DataItemItemType)[keyof typeof GetApiLibraryIdAlbumArtistsIdTracks200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdTracks200DataItemItemType = {
    track: 'track',
} as const;

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItemExternal = {
    [key: string]: unknown | null;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItemAlbumArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdTracks200DataItem = {
    /** @nullable */
    album: string | null;
    albumArtists: GetApiLibraryIdAlbumArtistsIdTracks200DataItemAlbumArtistsItem[];
    /** @nullable */
    albumId: string | null;
    /** @nullable */
    artistId: string | null;
    /** @nullable */
    artistName: string | null;
    artists: GetApiLibraryIdAlbumArtistsIdTracks200DataItemArtistsItem[];
    /** @nullable */
    bitDepth: number | null;
    /** @nullable */
    bitRate: number | null;
    /** @nullable */
    bpm: number | null;
    /** @nullable */
    channelCount: number | null;
    /** @nullable */
    comment: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    discNumber: string | null;
    /** @nullable */
    discSubtitle: string | null;
    duration: number;
    external: GetApiLibraryIdAlbumArtistsIdTracks200DataItemExternal;
    /** @nullable */
    fileContainer: string | null;
    /** @nullable */
    fileName: string | null;
    /** @nullable */
    filePath: string | null;
    /** @nullable */
    fileSize: number | null;
    genres: GetApiLibraryIdAlbumArtistsIdTracks200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdAlbumArtistsIdTracks200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    rgAlbumGain: number | null;
    /** @nullable */
    rgAlbumPeak: number | null;
    /** @nullable */
    rgTrackGain: number | null;
    /** @nullable */
    rgTrackPeak: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackNumber: number | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    userPlayCount: number;
    /** @nullable */
    userRating: number | null;
};

export type GetApiLibraryIdAlbumArtistsIdTracksSortOrder =
    (typeof GetApiLibraryIdAlbumArtistsIdTracksSortOrder)[keyof typeof GetApiLibraryIdAlbumArtistsIdTracksSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdTracksSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumArtistsIdTracksSortBy =
    (typeof GetApiLibraryIdAlbumArtistsIdTracksSortBy)[keyof typeof GetApiLibraryIdAlbumArtistsIdTracksSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdTracksSortBy = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    bpm: 'bpm',
    channels: 'channels',
    comment: 'comment',
    duration: 'duration',
    genre: 'genre',
    id: 'id',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    recentlyAdded: 'recentlyAdded',
    recentlyPlayed: 'recentlyPlayed',
    releaseDate: 'releaseDate',
    year: 'year',
} as const;

export type GetApiLibraryIdAlbumArtistsIdTracksParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumArtistsIdTracksSortBy;
    sortOrder: GetApiLibraryIdAlbumArtistsIdTracksSortOrder;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200 = {
    data: GetApiLibraryIdAlbumArtistsIdAlbums200DataItem[];
    meta: GetApiLibraryIdAlbumArtistsIdAlbums200Meta;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemReleaseTypesItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemRecordLabelsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemMoodsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemItemType =
    (typeof GetApiLibraryIdAlbumArtistsIdAlbums200DataItemItemType)[keyof typeof GetApiLibraryIdAlbumArtistsIdAlbums200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdAlbums200DataItemItemType = {
    album: 'album',
} as const;

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemExternal = {
    musicBrainzId?: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemDiscTitlesItem = {
    disc: number;
    title: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsIdAlbums200DataItem = {
    /** @nullable */
    artistId: string | null;
    artists: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemArtistsItem[];
    /** @nullable */
    comment: string | null;
    createdDate: string;
    /** @nullable */
    description: string | null;
    discTitles: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemDiscTitlesItem[];
    /** Duration in seconds */
    duration: number;
    external: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemExternal;
    genres: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemItemType;
    libraryId: string;
    moods: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemMoodsItem[];
    name: string;
    /** @nullable */
    originalReleaseDate: string | null;
    recordLabels: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemRecordLabelsItem[];
    /** @nullable */
    releaseDate: string | null;
    releaseTypes: GetApiLibraryIdAlbumArtistsIdAlbums200DataItemReleaseTypesItem[];
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    songCount: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    /** @nullable */
    userPlayCount: number | null;
    /** @nullable */
    userRating: number | null;
    /** @nullable */
    userRatingDate: string | null;
};

export type GetApiLibraryIdAlbumArtistsIdAlbumsSortOrder =
    (typeof GetApiLibraryIdAlbumArtistsIdAlbumsSortOrder)[keyof typeof GetApiLibraryIdAlbumArtistsIdAlbumsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdAlbumsSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumArtistsIdAlbumsSortBy =
    (typeof GetApiLibraryIdAlbumArtistsIdAlbumsSortBy)[keyof typeof GetApiLibraryIdAlbumArtistsIdAlbumsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsIdAlbumsSortBy = {
    albumArtist: 'albumArtist',
    artist: 'artist',
    communityRating: 'communityRating',
    criticRating: 'criticRating',
    dateAdded: 'dateAdded',
    datePlayed: 'datePlayed',
    duration: 'duration',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    releaseDate: 'releaseDate',
    trackCount: 'trackCount',
    year: 'year',
} as const;

export type GetApiLibraryIdAlbumArtistsIdAlbumsParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumArtistsIdAlbumsSortBy;
    sortOrder: GetApiLibraryIdAlbumArtistsIdAlbumsSortOrder;
};

export type GetApiLibraryIdAlbumArtistsId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsId200Meta = { [key: string]: unknown };

export type GetApiLibraryIdAlbumArtistsId200DataItemType =
    (typeof GetApiLibraryIdAlbumArtistsId200DataItemType)[keyof typeof GetApiLibraryIdAlbumArtistsId200DataItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsId200DataItemType = {
    albumArtist: 'albumArtist',
} as const;

export type GetApiLibraryIdAlbumArtistsId200DataGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtistsId200DataExternal = {
    musicBrainzId?: string;
};

export type GetApiLibraryIdAlbumArtistsId200Data = {
    /** @nullable */
    albumCount: number | null;
    /** @nullable */
    biography: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    duration: number | null;
    external: GetApiLibraryIdAlbumArtistsId200DataExternal;
    genres: GetApiLibraryIdAlbumArtistsId200DataGenresItem[];
    id: string;
    imageUrl: string;
    itemType: GetApiLibraryIdAlbumArtistsId200DataItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    songCount: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    /** @nullable */
    userRating: number | null;
    /** @nullable */
    userRatingDate: string | null;
};

export type GetApiLibraryIdAlbumArtistsId200 = {
    data: GetApiLibraryIdAlbumArtistsId200Data;
    meta: GetApiLibraryIdAlbumArtistsId200Meta;
};

export type GetApiLibraryIdAlbumArtistsCount500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsCount422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsCount403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsCount401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtistsCountSortOrder =
    (typeof GetApiLibraryIdAlbumArtistsCountSortOrder)[keyof typeof GetApiLibraryIdAlbumArtistsCountSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsCountSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumArtistsCountSortBy =
    (typeof GetApiLibraryIdAlbumArtistsCountSortBy)[keyof typeof GetApiLibraryIdAlbumArtistsCountSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsCountSortBy = {
    album: 'album',
    albumCount: 'albumCount',
    dateAdded: 'dateAdded',
    duration: 'duration',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    releaseDate: 'releaseDate',
    trackCount: 'trackCount',
} as const;

export type GetApiLibraryIdAlbumArtistsCountParams = {
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumArtistsCountSortBy;
    sortOrder: GetApiLibraryIdAlbumArtistsCountSortOrder;
};

export type GetApiLibraryIdAlbumArtists500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtists422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtists403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtists401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumArtists200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdAlbumArtists200DataItemItemType =
    (typeof GetApiLibraryIdAlbumArtists200DataItemItemType)[keyof typeof GetApiLibraryIdAlbumArtists200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtists200DataItemItemType = {
    albumArtist: 'albumArtist',
} as const;

export type GetApiLibraryIdAlbumArtists200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumArtists200DataItemExternal = {
    musicBrainzId?: string;
};

export type GetApiLibraryIdAlbumArtists200DataItem = {
    /** @nullable */
    albumCount: number | null;
    /** @nullable */
    biography: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    duration: number | null;
    external: GetApiLibraryIdAlbumArtists200DataItemExternal;
    genres: GetApiLibraryIdAlbumArtists200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    itemType: GetApiLibraryIdAlbumArtists200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    songCount: number | null;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    /** @nullable */
    userRating: number | null;
    /** @nullable */
    userRatingDate: string | null;
};

export type GetApiLibraryIdAlbumArtists200 = {
    data: GetApiLibraryIdAlbumArtists200DataItem[];
    meta: GetApiLibraryIdAlbumArtists200Meta;
};

export type GetApiLibraryIdAlbumArtistsSortOrder =
    (typeof GetApiLibraryIdAlbumArtistsSortOrder)[keyof typeof GetApiLibraryIdAlbumArtistsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumArtistsSortBy =
    (typeof GetApiLibraryIdAlbumArtistsSortBy)[keyof typeof GetApiLibraryIdAlbumArtistsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumArtistsSortBy = {
    album: 'album',
    albumCount: 'albumCount',
    dateAdded: 'dateAdded',
    duration: 'duration',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    releaseDate: 'releaseDate',
    trackCount: 'trackCount',
} as const;

export type GetApiLibraryIdAlbumArtistsParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumArtistsSortBy;
    sortOrder: GetApiLibraryIdAlbumArtistsSortOrder;
};

export type DeleteApiLibraryIdTracksIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdTracksIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdTracksIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdTracksIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type DeleteApiLibraryIdTracksIdFavorite204 = unknown | null;

export type PostApiLibraryIdTracksIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdTracksIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdTracksIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdTracksIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostApiLibraryIdTracksIdFavorite204 = unknown | null;

export type GetApiLibraryIdTracksId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksId200Meta = { [key: string]: unknown };

export type GetApiLibraryIdTracksId200 = {
    data: GetApiLibraryIdTracksId200Data;
    meta: GetApiLibraryIdTracksId200Meta;
};

export type GetApiLibraryIdTracksId200DataReleaseTypesItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdTracksId200DataRecordLabelsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdTracksId200DataMoodsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdTracksId200DataItemType =
    (typeof GetApiLibraryIdTracksId200DataItemType)[keyof typeof GetApiLibraryIdTracksId200DataItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracksId200DataItemType = {
    album: 'album',
} as const;

export type GetApiLibraryIdTracksId200DataGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdTracksId200DataExternal = {
    musicBrainzId?: string;
};

export type GetApiLibraryIdTracksId200DataDiscTitlesItem = {
    disc: number;
    title: string;
};

export type GetApiLibraryIdTracksId200DataArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdTracksId200Data = {
    /** @nullable */
    artistId: string | null;
    artists: GetApiLibraryIdTracksId200DataArtistsItem[];
    /** @nullable */
    comment: string | null;
    createdDate: string;
    /** @nullable */
    description: string | null;
    discTitles: GetApiLibraryIdTracksId200DataDiscTitlesItem[];
    /** Duration in seconds */
    duration: number;
    external: GetApiLibraryIdTracksId200DataExternal;
    genres: GetApiLibraryIdTracksId200DataGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdTracksId200DataItemType;
    libraryId: string;
    moods: GetApiLibraryIdTracksId200DataMoodsItem[];
    name: string;
    /** @nullable */
    originalReleaseDate: string | null;
    recordLabels: GetApiLibraryIdTracksId200DataRecordLabelsItem[];
    /** @nullable */
    releaseDate: string | null;
    releaseTypes: GetApiLibraryIdTracksId200DataReleaseTypesItem[];
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    songCount: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    /** @nullable */
    userPlayCount: number | null;
    /** @nullable */
    userRating: number | null;
    /** @nullable */
    userRatingDate: string | null;
};

export type GetApiLibraryIdTracksCount500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksCount422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksCount403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksCount401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracksCountSortOrder =
    (typeof GetApiLibraryIdTracksCountSortOrder)[keyof typeof GetApiLibraryIdTracksCountSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracksCountSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdTracksCountSortBy =
    (typeof GetApiLibraryIdTracksCountSortBy)[keyof typeof GetApiLibraryIdTracksCountSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracksCountSortBy = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    bpm: 'bpm',
    channels: 'channels',
    comment: 'comment',
    duration: 'duration',
    genre: 'genre',
    id: 'id',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    recentlyAdded: 'recentlyAdded',
    recentlyPlayed: 'recentlyPlayed',
    releaseDate: 'releaseDate',
    year: 'year',
} as const;

export type GetApiLibraryIdTracksCountParams = {
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdTracksCountSortBy;
    sortOrder: GetApiLibraryIdTracksCountSortOrder;
};

export type GetApiLibraryIdTracks500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracks422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracks403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracks401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdTracks200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdTracks200 = {
    data: GetApiLibraryIdTracks200DataItem[];
    meta: GetApiLibraryIdTracks200Meta;
};

export type GetApiLibraryIdTracks200DataItemItemType =
    (typeof GetApiLibraryIdTracks200DataItemItemType)[keyof typeof GetApiLibraryIdTracks200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracks200DataItemItemType = {
    track: 'track',
} as const;

export type GetApiLibraryIdTracks200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdTracks200DataItemExternal = { [key: string]: unknown | null };

export type GetApiLibraryIdTracks200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdTracks200DataItemAlbumArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdTracks200DataItem = {
    /** @nullable */
    album: string | null;
    albumArtists: GetApiLibraryIdTracks200DataItemAlbumArtistsItem[];
    /** @nullable */
    albumId: string | null;
    /** @nullable */
    artistId: string | null;
    /** @nullable */
    artistName: string | null;
    artists: GetApiLibraryIdTracks200DataItemArtistsItem[];
    /** @nullable */
    bitDepth: number | null;
    /** @nullable */
    bitRate: number | null;
    /** @nullable */
    bpm: number | null;
    /** @nullable */
    channelCount: number | null;
    /** @nullable */
    comment: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    discNumber: string | null;
    /** @nullable */
    discSubtitle: string | null;
    duration: number;
    external: GetApiLibraryIdTracks200DataItemExternal;
    /** @nullable */
    fileContainer: string | null;
    /** @nullable */
    fileName: string | null;
    /** @nullable */
    filePath: string | null;
    /** @nullable */
    fileSize: number | null;
    genres: GetApiLibraryIdTracks200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdTracks200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    rgAlbumGain: number | null;
    /** @nullable */
    rgAlbumPeak: number | null;
    /** @nullable */
    rgTrackGain: number | null;
    /** @nullable */
    rgTrackPeak: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackNumber: number | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    userPlayCount: number;
    /** @nullable */
    userRating: number | null;
};

export type GetApiLibraryIdTracksSortOrder =
    (typeof GetApiLibraryIdTracksSortOrder)[keyof typeof GetApiLibraryIdTracksSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracksSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdTracksSortBy =
    (typeof GetApiLibraryIdTracksSortBy)[keyof typeof GetApiLibraryIdTracksSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdTracksSortBy = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    bpm: 'bpm',
    channels: 'channels',
    comment: 'comment',
    duration: 'duration',
    genre: 'genre',
    id: 'id',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    recentlyAdded: 'recentlyAdded',
    recentlyPlayed: 'recentlyPlayed',
    releaseDate: 'releaseDate',
    year: 'year',
} as const;

export type GetApiLibraryIdTracksParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdTracksSortBy;
    sortOrder: GetApiLibraryIdTracksSortOrder;
};

export type DeleteApiLibraryIdAlbumsIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumsIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumsIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibraryIdAlbumsIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type DeleteApiLibraryIdAlbumsIdFavorite204 = unknown | null;

export type PostApiLibraryIdAlbumsIdFavorite500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumsIdFavorite404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumsIdFavorite403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraryIdAlbumsIdFavorite401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostApiLibraryIdAlbumsIdFavorite204 = unknown | null;

export type GetApiLibraryIdAlbumsId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsId200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdAlbumsId200 = {
    data: GetApiLibraryIdAlbumsId200DataItem[];
    meta: GetApiLibraryIdAlbumsId200Meta;
};

export type GetApiLibraryIdAlbumsId200DataItemItemType =
    (typeof GetApiLibraryIdAlbumsId200DataItemItemType)[keyof typeof GetApiLibraryIdAlbumsId200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsId200DataItemItemType = {
    track: 'track',
} as const;

export type GetApiLibraryIdAlbumsId200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumsId200DataItemExternal = { [key: string]: unknown | null };

export type GetApiLibraryIdAlbumsId200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumsId200DataItemAlbumArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbumsId200DataItem = {
    /** @nullable */
    album: string | null;
    albumArtists: GetApiLibraryIdAlbumsId200DataItemAlbumArtistsItem[];
    /** @nullable */
    albumId: string | null;
    /** @nullable */
    artistId: string | null;
    /** @nullable */
    artistName: string | null;
    artists: GetApiLibraryIdAlbumsId200DataItemArtistsItem[];
    /** @nullable */
    bitDepth: number | null;
    /** @nullable */
    bitRate: number | null;
    /** @nullable */
    bpm: number | null;
    /** @nullable */
    channelCount: number | null;
    /** @nullable */
    comment: string | null;
    /** @nullable */
    createdDate: string | null;
    /** @nullable */
    discNumber: string | null;
    /** @nullable */
    discSubtitle: string | null;
    duration: number;
    external: GetApiLibraryIdAlbumsId200DataItemExternal;
    /** @nullable */
    fileContainer: string | null;
    /** @nullable */
    fileName: string | null;
    /** @nullable */
    filePath: string | null;
    /** @nullable */
    fileSize: number | null;
    genres: GetApiLibraryIdAlbumsId200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdAlbumsId200DataItemItemType;
    libraryId: string;
    name: string;
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    rgAlbumGain: number | null;
    /** @nullable */
    rgAlbumPeak: number | null;
    /** @nullable */
    rgTrackGain: number | null;
    /** @nullable */
    rgTrackPeak: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    trackNumber: number | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    userPlayCount: number;
    /** @nullable */
    userRating: number | null;
};

export type GetApiLibraryIdAlbumsIdSortOrder =
    (typeof GetApiLibraryIdAlbumsIdSortOrder)[keyof typeof GetApiLibraryIdAlbumsIdSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsIdSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumsIdSortBy =
    (typeof GetApiLibraryIdAlbumsIdSortBy)[keyof typeof GetApiLibraryIdAlbumsIdSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsIdSortBy = {
    album: 'album',
    albumArtist: 'albumArtist',
    artist: 'artist',
    bpm: 'bpm',
    channels: 'channels',
    comment: 'comment',
    duration: 'duration',
    genre: 'genre',
    id: 'id',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    recentlyAdded: 'recentlyAdded',
    recentlyPlayed: 'recentlyPlayed',
    releaseDate: 'releaseDate',
    year: 'year',
} as const;

export type GetApiLibraryIdAlbumsIdParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumsIdSortBy;
    sortOrder: GetApiLibraryIdAlbumsIdSortOrder;
};

export type GetApiLibraryIdAlbumsCount500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsCount422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsCount403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsCount401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbumsCountSortOrder =
    (typeof GetApiLibraryIdAlbumsCountSortOrder)[keyof typeof GetApiLibraryIdAlbumsCountSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsCountSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumsCountSortBy =
    (typeof GetApiLibraryIdAlbumsCountSortBy)[keyof typeof GetApiLibraryIdAlbumsCountSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsCountSortBy = {
    albumArtist: 'albumArtist',
    artist: 'artist',
    communityRating: 'communityRating',
    criticRating: 'criticRating',
    dateAdded: 'dateAdded',
    datePlayed: 'datePlayed',
    duration: 'duration',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    releaseDate: 'releaseDate',
    trackCount: 'trackCount',
    year: 'year',
} as const;

export type GetApiLibraryIdAlbumsCountParams = {
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumsCountSortBy;
    sortOrder: GetApiLibraryIdAlbumsCountSortOrder;
};

export type GetApiLibraryIdAlbums500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbums422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbums403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbums401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraryIdAlbums200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraryIdAlbums200DataItemReleaseTypesItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbums200DataItemRecordLabelsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbums200DataItemMoodsItem = {
    id: string;
    name: string;
};

export type GetApiLibraryIdAlbums200DataItemItemType =
    (typeof GetApiLibraryIdAlbums200DataItemItemType)[keyof typeof GetApiLibraryIdAlbums200DataItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbums200DataItemItemType = {
    album: 'album',
} as const;

export type GetApiLibraryIdAlbums200DataItemGenresItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbums200DataItemExternal = {
    musicBrainzId?: string;
};

export type GetApiLibraryIdAlbums200DataItemDiscTitlesItem = {
    disc: number;
    title: string;
};

export type GetApiLibraryIdAlbums200DataItemArtistsItem = {
    id: string;
    /** @nullable */
    imageUrl: string | null;
    name: string;
};

export type GetApiLibraryIdAlbums200DataItem = {
    /** @nullable */
    artistId: string | null;
    artists: GetApiLibraryIdAlbums200DataItemArtistsItem[];
    /** @nullable */
    comment: string | null;
    createdDate: string;
    /** @nullable */
    description: string | null;
    discTitles: GetApiLibraryIdAlbums200DataItemDiscTitlesItem[];
    /** Duration in seconds */
    duration: number;
    external: GetApiLibraryIdAlbums200DataItemExternal;
    genres: GetApiLibraryIdAlbums200DataItemGenresItem[];
    id: string;
    imageUrl: string;
    isCompilation: boolean;
    itemType: GetApiLibraryIdAlbums200DataItemItemType;
    libraryId: string;
    moods: GetApiLibraryIdAlbums200DataItemMoodsItem[];
    name: string;
    /** @nullable */
    originalReleaseDate: string | null;
    recordLabels: GetApiLibraryIdAlbums200DataItemRecordLabelsItem[];
    /** @nullable */
    releaseDate: string | null;
    releaseTypes: GetApiLibraryIdAlbums200DataItemReleaseTypesItem[];
    /** @nullable */
    releaseYear: number | null;
    /** @nullable */
    size: number | null;
    /** @nullable */
    songCount: number | null;
    sortName: string;
    /** @nullable */
    thumbHash: string | null;
    /** @nullable */
    updatedDate: string | null;
    userFavorite: boolean;
    /** @nullable */
    userFavoriteDate: string | null;
    /** @nullable */
    userLastPlayedDate: string | null;
    /** @nullable */
    userPlayCount: number | null;
    /** @nullable */
    userRating: number | null;
    /** @nullable */
    userRatingDate: string | null;
};

export type GetApiLibraryIdAlbums200 = {
    data: GetApiLibraryIdAlbums200DataItem[];
    meta: GetApiLibraryIdAlbums200Meta;
};

export type GetApiLibraryIdAlbumsSortOrder =
    (typeof GetApiLibraryIdAlbumsSortOrder)[keyof typeof GetApiLibraryIdAlbumsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibraryIdAlbumsSortBy =
    (typeof GetApiLibraryIdAlbumsSortBy)[keyof typeof GetApiLibraryIdAlbumsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraryIdAlbumsSortBy = {
    albumArtist: 'albumArtist',
    artist: 'artist',
    communityRating: 'communityRating',
    criticRating: 'criticRating',
    dateAdded: 'dateAdded',
    datePlayed: 'datePlayed',
    duration: 'duration',
    isFavorite: 'isFavorite',
    name: 'name',
    playCount: 'playCount',
    random: 'random',
    rating: 'rating',
    releaseDate: 'releaseDate',
    trackCount: 'trackCount',
    year: 'year',
} as const;

export type GetApiLibraryIdAlbumsParams = {
    limit?: string;
    offset?: string;
    folderId?: string[];
    searchTerm?: string;
    sortBy: GetApiLibraryIdAlbumsSortBy;
    sortOrder: GetApiLibraryIdAlbumsSortOrder;
};

export type PostApiLibrariesIdAuth500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibrariesIdAuth422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibrariesIdAuth404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibrariesIdAuth403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibrariesIdAuth401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibrariesIdAuth400 = {
    message: string;
};

export type PostApiLibrariesIdAuth200Meta = { [key: string]: unknown };

export type PostApiLibrariesIdAuth200DataType =
    (typeof PostApiLibrariesIdAuth200DataType)[keyof typeof PostApiLibrariesIdAuth200DataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiLibrariesIdAuth200DataType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type PostApiLibrariesIdAuth200Data = {
    credential: string;
    type: PostApiLibrariesIdAuth200DataType;
    username: string;
};

export type PostApiLibrariesIdAuth200 = {
    data: PostApiLibrariesIdAuth200Data;
    meta: PostApiLibrariesIdAuth200Meta;
};

export type PostApiLibrariesIdAuthBody = {
    baseUrl?: string;
    password: string;
    username: string;
};

export type DeleteApiLibrariesId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibrariesId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibrariesId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibrariesId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiLibrariesId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type DeleteApiLibrariesId204 = unknown | null;

export type PutApiLibrariesId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibrariesId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibrariesId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibrariesId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibrariesId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiLibrariesId400 = {
    message: string;
};

export type PutApiLibrariesId200Meta = { [key: string]: unknown };

export type PutApiLibrariesId200DataType =
    (typeof PutApiLibrariesId200DataType)[keyof typeof PutApiLibrariesId200DataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiLibrariesId200DataType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type PutApiLibrariesId200DataFoldersItem = {
    id: string;
    name: string;
};

export type PutApiLibrariesId200Data = {
    baseUrl: string;
    createdAt: string;
    displayName: string;
    folders: PutApiLibrariesId200DataFoldersItem[];
    id: string;
    type: PutApiLibrariesId200DataType;
    updatedAt: string;
};

export type PutApiLibrariesId200 = {
    data: PutApiLibrariesId200Data;
    meta: PutApiLibrariesId200Meta;
};

export type PutApiLibrariesIdBody = {
    baseUrl: string;
    displayName: string;
    isPublic?: boolean;
    password: string;
    username: string;
};

export type GetApiLibrariesId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibrariesId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibrariesId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibrariesId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibrariesId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibrariesId200Meta = { [key: string]: unknown };

export type GetApiLibrariesId200 = {
    data: GetApiLibrariesId200Data;
    meta: GetApiLibrariesId200Meta;
};

export type GetApiLibrariesId200DataType =
    (typeof GetApiLibrariesId200DataType)[keyof typeof GetApiLibrariesId200DataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibrariesId200DataType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type GetApiLibrariesId200DataFoldersItem = {
    id: string;
    name: string;
};

export type GetApiLibrariesId200Data = {
    baseUrl: string;
    createdAt: string;
    displayName: string;
    folders: GetApiLibrariesId200DataFoldersItem[];
    id: string;
    type: GetApiLibrariesId200DataType;
    updatedAt: string;
};

export type PostApiLibraries500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries409 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiLibraries400 = {
    message: string;
};

export type PostApiLibraries201Meta = { [key: string]: unknown };

export type PostApiLibraries201DataType =
    (typeof PostApiLibraries201DataType)[keyof typeof PostApiLibraries201DataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiLibraries201DataType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type PostApiLibraries201DataFoldersItem = {
    id: string;
    name: string;
};

export type PostApiLibraries201Data = {
    baseUrl: string;
    createdAt: string;
    displayName: string;
    folders: PostApiLibraries201DataFoldersItem[];
    id: string;
    type: PostApiLibraries201DataType;
    updatedAt: string;
};

export type PostApiLibraries201 = {
    data: PostApiLibraries201Data;
    meta: PostApiLibraries201Meta;
};

export type PostApiLibrariesBodyType =
    (typeof PostApiLibrariesBodyType)[keyof typeof PostApiLibrariesBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiLibrariesBodyType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type PostApiLibrariesBody = {
    baseUrl: string;
    displayName: string;
    isPublic?: boolean;
    password: string;
    type: PostApiLibrariesBodyType;
    username: string;
};

export type GetApiLibraries500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraries422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraries404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraries403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraries401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiLibraries200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiLibraries200 = {
    data: GetApiLibraries200DataItem[];
    meta: GetApiLibraries200Meta;
};

export type GetApiLibraries200DataItemType =
    (typeof GetApiLibraries200DataItemType)[keyof typeof GetApiLibraries200DataItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibraries200DataItemType = {
    JELLYFIN: 'JELLYFIN',
    NAVIDROME: 'NAVIDROME',
    SUBSONIC: 'SUBSONIC',
} as const;

export type GetApiLibraries200DataItemFoldersItem = {
    id: string;
    name: string;
};

export type GetApiLibraries200DataItem = {
    baseUrl: string;
    createdAt: string;
    displayName: string;
    folders: GetApiLibraries200DataItemFoldersItem[];
    id: string;
    type: GetApiLibraries200DataItemType;
    updatedAt: string;
};

export type GetApiLibrariesSortOrder =
    (typeof GetApiLibrariesSortOrder)[keyof typeof GetApiLibrariesSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibrariesSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiLibrariesSortBy =
    (typeof GetApiLibrariesSortBy)[keyof typeof GetApiLibrariesSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiLibrariesSortBy = {
    createdAt: 'createdAt',
    name: 'name',
    type: 'type',
    updatedAt: 'updatedAt',
} as const;

export type GetApiLibrariesParams = {
    limit?: string;
    offset?: string;
    sortBy: GetApiLibrariesSortBy;
    sortOrder: GetApiLibrariesSortOrder;
};

export type PutApiUsersId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiUsersId422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiUsersId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiUsersId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiUsersId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PutApiUsersId400 = {
    message: string;
};

export type PutApiUsersId200Meta = { [key: string]: unknown };

export type PutApiUsersId200 = {
    data: PutApiUsersId200Data;
    meta: PutApiUsersId200Meta;
};

export type PutApiUsersId200DataUpdatedAt = string | string;

export type PutApiUsersId200DataCreatedAt = string | string;

export type PutApiUsersId200Data = {
    createdAt: PutApiUsersId200DataCreatedAt;
    /** @nullable */
    displayName: string | null;
    id: string;
    isAdmin: boolean;
    isEnabled: boolean;
    updatedAt: PutApiUsersId200DataUpdatedAt;
    username: string;
};

export type PutApiUsersIdBody = {
    displayName?: string;
    isAdmin?: boolean;
    isEnabled?: boolean;
    password?: string;
    username?: string;
};

export type DeleteApiUsersId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiUsersId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiUsersId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type DeleteApiUsersId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type DeleteApiUsersId204 = unknown | null;

export type GetApiUsersId500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsersId404 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsersId403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsersId401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsersId200Meta = { [key: string]: unknown };

export type GetApiUsersId200 = {
    data: GetApiUsersId200Data;
    meta: GetApiUsersId200Meta;
};

export type GetApiUsersId200DataUpdatedAt = string | string;

export type GetApiUsersId200DataCreatedAt = string | string;

export type GetApiUsersId200Data = {
    createdAt: GetApiUsersId200DataCreatedAt;
    /** @nullable */
    displayName: string | null;
    id: string;
    isAdmin: boolean;
    isEnabled: boolean;
    updatedAt: GetApiUsersId200DataUpdatedAt;
    username: string;
};

export type PostApiUsers500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiUsers422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiUsers409 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiUsers403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiUsers401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostApiUsers400 = {
    message: string;
};

export type PostApiUsers201Meta = { [key: string]: unknown };

export type PostApiUsers201 = {
    data: PostApiUsers201Data;
    meta: PostApiUsers201Meta;
};

export type PostApiUsers201DataUpdatedAt = string | string;

export type PostApiUsers201DataCreatedAt = string | string;

export type PostApiUsers201Data = {
    createdAt: PostApiUsers201DataCreatedAt;
    /** @nullable */
    displayName: string | null;
    id: string;
    isAdmin: boolean;
    isEnabled: boolean;
    updatedAt: PostApiUsers201DataUpdatedAt;
    username: string;
};

export type PostApiUsersBody = {
    displayName?: string;
    isAdmin?: boolean;
    isEnabled?: boolean;
    password: string;
    username: string;
};

export type GetApiUsers500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsers422 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsers403 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsers401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type GetApiUsers200Meta = {
    next: boolean;
    prev: boolean;
    totalRecordCount: number;
};

export type GetApiUsers200DataItemUpdatedAt = string | string;

export type GetApiUsers200DataItemCreatedAt = string | string;

export type GetApiUsers200DataItem = {
    createdAt: GetApiUsers200DataItemCreatedAt;
    /** @nullable */
    displayName: string | null;
    id: string;
    isAdmin: boolean;
    isEnabled: boolean;
    updatedAt: GetApiUsers200DataItemUpdatedAt;
    username: string;
};

export type GetApiUsers200 = {
    data: GetApiUsers200DataItem[];
    meta: GetApiUsers200Meta;
};

export type GetApiUsersSortOrder = (typeof GetApiUsersSortOrder)[keyof typeof GetApiUsersSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiUsersSortOrder = {
    asc: 'asc',
    desc: 'desc',
} as const;

export type GetApiUsersSortBy = (typeof GetApiUsersSortBy)[keyof typeof GetApiUsersSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiUsersSortBy = {
    createdAt: 'createdAt',
    displayName: 'displayName',
    name: 'name',
    updatedAt: 'updatedAt',
} as const;

export type GetApiUsersParams = {
    limit?: string;
    offset?: string;
    sortBy: GetApiUsersSortBy;
    sortOrder: GetApiUsersSortOrder;
};

export type PostAuthRegister500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostAuthRegister204 = unknown | null;

export type PostAuthRegisterBody = {
    password: string;
    username: string;
};

export type PostAuthSignOut500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostAuthSignOut401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

/**
 * @nullable
 */
export type PostAuthSignOut204 = unknown | null;

export type PostAuthSignOutBody = {
    token?: string;
};

export type PostAuthSignIn500 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostAuthSignIn401 = {
    cause?: string;
    message: string;
    name: string;
    stack?: string;
    status: number;
};

export type PostAuthSignIn200Meta = { [key: string]: unknown };

export type PostAuthSignIn200 = {
    data: PostAuthSignIn200Data;
    meta: PostAuthSignIn200Meta;
};

export type PostAuthSignIn200DataUpdatedAt = string | string;

export type PostAuthSignIn200DataToken = {
    id: string;
    token: string;
};

export type PostAuthSignIn200DataCreatedAt = string | string;

export type PostAuthSignIn200Data = {
    createdAt: PostAuthSignIn200DataCreatedAt;
    /** @nullable */
    displayName: string | null;
    id: string;
    isAdmin: boolean;
    isEnabled: boolean;
    token: PostAuthSignIn200DataToken;
    updatedAt: PostAuthSignIn200DataUpdatedAt;
    username: string;
};

export type PostAuthSignInBody = {
    password: string;
    username: string;
};

export type GetPing200 = {
    isSetupComplete: boolean;
    name: string;
    status: string;
    version: string;
};
