/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    QueryFunction,
    QueryKey,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    GetApiLibraryIdGenres200,
    GetApiLibraryIdGenres401,
    GetApiLibraryIdGenres403,
    GetApiLibraryIdGenres422,
    GetApiLibraryIdGenres500,
    GetApiLibraryIdGenresCount401,
    GetApiLibraryIdGenresCount403,
    GetApiLibraryIdGenresCount422,
    GetApiLibraryIdGenresCount500,
    GetApiLibraryIdGenresCountParams,
    GetApiLibraryIdGenresIdTracks200,
    GetApiLibraryIdGenresIdTracks401,
    GetApiLibraryIdGenresIdTracks403,
    GetApiLibraryIdGenresIdTracks422,
    GetApiLibraryIdGenresIdTracks500,
    GetApiLibraryIdGenresIdTracksCount401,
    GetApiLibraryIdGenresIdTracksCount403,
    GetApiLibraryIdGenresIdTracksCount422,
    GetApiLibraryIdGenresIdTracksCount500,
    GetApiLibraryIdGenresIdTracksCountParams,
    GetApiLibraryIdGenresIdTracksParams,
    GetApiLibraryIdGenresParams,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all genres
 */
export const getApiLibraryIdGenres = (
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdGenres200>(
        { url: `/api/${libraryId}/genres`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdGenresQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
) => {
    return [`/api/${libraryId}/genres`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdGenresSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
    TError = ErrorType<
        | GetApiLibraryIdGenres401
        | GetApiLibraryIdGenres403
        | GetApiLibraryIdGenres422
        | GetApiLibraryIdGenres500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdGenresQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdGenres>>> = ({
        signal,
    }) => getApiLibraryIdGenres(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiLibraryIdGenresSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdGenres>>
>;
export type GetApiLibraryIdGenresSuspenseQueryError = ErrorType<
    | GetApiLibraryIdGenres401
    | GetApiLibraryIdGenres403
    | GetApiLibraryIdGenres422
    | GetApiLibraryIdGenres500
>;

export function useGetApiLibraryIdGenresSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
    TError = ErrorType<
        | GetApiLibraryIdGenres401
        | GetApiLibraryIdGenres403
        | GetApiLibraryIdGenres422
        | GetApiLibraryIdGenres500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
    TError = ErrorType<
        | GetApiLibraryIdGenres401
        | GetApiLibraryIdGenres403
        | GetApiLibraryIdGenres422
        | GetApiLibraryIdGenres500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
    TError = ErrorType<
        | GetApiLibraryIdGenres401
        | GetApiLibraryIdGenres403
        | GetApiLibraryIdGenres422
        | GetApiLibraryIdGenres500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get all genres
 */

export function useGetApiLibraryIdGenresSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
    TError = ErrorType<
        | GetApiLibraryIdGenres401
        | GetApiLibraryIdGenres403
        | GetApiLibraryIdGenres422
        | GetApiLibraryIdGenres500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenres>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetApiLibraryIdGenresSuspenseQueryOptions(libraryId, params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get genres count
 */
export const getApiLibraryIdGenresCount = (
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/genres/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdGenresCountQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
) => {
    return [`/api/${libraryId}/genres/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdGenresCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresCount401
        | GetApiLibraryIdGenresCount403
        | GetApiLibraryIdGenresCount422
        | GetApiLibraryIdGenresCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdGenresCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>> = ({
        signal,
    }) => getApiLibraryIdGenresCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiLibraryIdGenresCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>
>;
export type GetApiLibraryIdGenresCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdGenresCount401
    | GetApiLibraryIdGenresCount403
    | GetApiLibraryIdGenresCount422
    | GetApiLibraryIdGenresCount500
>;

export function useGetApiLibraryIdGenresCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresCount401
        | GetApiLibraryIdGenresCount403
        | GetApiLibraryIdGenresCount422
        | GetApiLibraryIdGenresCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresCount401
        | GetApiLibraryIdGenresCount403
        | GetApiLibraryIdGenresCount422
        | GetApiLibraryIdGenresCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresCount401
        | GetApiLibraryIdGenresCount403
        | GetApiLibraryIdGenresCount422
        | GetApiLibraryIdGenresCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get genres count
 */

export function useGetApiLibraryIdGenresCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresCount401
        | GetApiLibraryIdGenresCount403
        | GetApiLibraryIdGenresCount422
        | GetApiLibraryIdGenresCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdGenresCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetApiLibraryIdGenresCountSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get genre tracks
 */
export const getApiLibraryIdGenresIdTracks = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdGenresIdTracks200>(
        { url: `/api/${libraryId}/genres/${id}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdGenresIdTracksQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
) => {
    return [`/api/${libraryId}/genres/${id}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdGenresIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracks401
        | GetApiLibraryIdGenresIdTracks403
        | GetApiLibraryIdGenresIdTracks422
        | GetApiLibraryIdGenresIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdGenresIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdGenresIdTracks(libraryId, id, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiLibraryIdGenresIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>
>;
export type GetApiLibraryIdGenresIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdGenresIdTracks401
    | GetApiLibraryIdGenresIdTracks403
    | GetApiLibraryIdGenresIdTracks422
    | GetApiLibraryIdGenresIdTracks500
>;

export function useGetApiLibraryIdGenresIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracks401
        | GetApiLibraryIdGenresIdTracks403
        | GetApiLibraryIdGenresIdTracks422
        | GetApiLibraryIdGenresIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracks401
        | GetApiLibraryIdGenresIdTracks403
        | GetApiLibraryIdGenresIdTracks422
        | GetApiLibraryIdGenresIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracks401
        | GetApiLibraryIdGenresIdTracks403
        | GetApiLibraryIdGenresIdTracks422
        | GetApiLibraryIdGenresIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get genre tracks
 */

export function useGetApiLibraryIdGenresIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracks401
        | GetApiLibraryIdGenresIdTracks403
        | GetApiLibraryIdGenresIdTracks422
        | GetApiLibraryIdGenresIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetApiLibraryIdGenresIdTracksSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get genre tracks count
 */
export const getApiLibraryIdGenresIdTracksCount = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/genres/${id}/tracks/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdGenresIdTracksCountQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
) => {
    return [`/api/${libraryId}/genres/${id}/tracks/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdGenresIdTracksCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracksCount401
        | GetApiLibraryIdGenresIdTracksCount403
        | GetApiLibraryIdGenresIdTracksCount422
        | GetApiLibraryIdGenresIdTracksCount500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdGenresIdTracksCountQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>
    > = ({ signal }) =>
        getApiLibraryIdGenresIdTracksCount(libraryId, id, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiLibraryIdGenresIdTracksCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>
>;
export type GetApiLibraryIdGenresIdTracksCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdGenresIdTracksCount401
    | GetApiLibraryIdGenresIdTracksCount403
    | GetApiLibraryIdGenresIdTracksCount422
    | GetApiLibraryIdGenresIdTracksCount500
>;

export function useGetApiLibraryIdGenresIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracksCount401
        | GetApiLibraryIdGenresIdTracksCount403
        | GetApiLibraryIdGenresIdTracksCount422
        | GetApiLibraryIdGenresIdTracksCount500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracksCount401
        | GetApiLibraryIdGenresIdTracksCount403
        | GetApiLibraryIdGenresIdTracksCount422
        | GetApiLibraryIdGenresIdTracksCount500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiLibraryIdGenresIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracksCount401
        | GetApiLibraryIdGenresIdTracksCount403
        | GetApiLibraryIdGenresIdTracksCount422
        | GetApiLibraryIdGenresIdTracksCount500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get genre tracks count
 */

export function useGetApiLibraryIdGenresIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdGenresIdTracksCount401
        | GetApiLibraryIdGenresIdTracksCount403
        | GetApiLibraryIdGenresIdTracksCount422
        | GetApiLibraryIdGenresIdTracksCount500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdGenresIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdGenresIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetApiLibraryIdGenresIdTracksCountSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
