/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';
import type {
    GetApiLibraryIdImagesId401,
    GetApiLibraryIdImagesId403,
    GetApiLibraryIdImagesId404,
    GetApiLibraryIdImagesId422,
    GetApiLibraryIdImagesId500,
    GetApiLibraryIdImagesIdParams,
} from '../audioling-openapi-client.schemas.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get image by id
 */
export const getApiLibraryIdImagesId = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<string>(
        { method: 'GET', params, signal, url: `/api/${libraryId}/images/${id}` },
        options,
    );
};

export const getGetApiLibraryIdImagesIdQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
) => {
    return [`/api/${libraryId}/images/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdImagesIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
    TError = ErrorType<
        | GetApiLibraryIdImagesId401
        | GetApiLibraryIdImagesId403
        | GetApiLibraryIdImagesId404
        | GetApiLibraryIdImagesId422
        | GetApiLibraryIdImagesId500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdImagesIdQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>> = ({
        signal,
    }) => getApiLibraryIdImagesId(libraryId, id, params, requestOptions, signal);

    return { enabled: !!(libraryId && id), queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdImagesIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdImagesId>>
>;
export type GetApiLibraryIdImagesIdQueryError = ErrorType<
    | GetApiLibraryIdImagesId401
    | GetApiLibraryIdImagesId403
    | GetApiLibraryIdImagesId404
    | GetApiLibraryIdImagesId422
    | GetApiLibraryIdImagesId500
>;

export function useGetApiLibraryIdImagesId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
    TError = ErrorType<
        | GetApiLibraryIdImagesId401
        | GetApiLibraryIdImagesId403
        | GetApiLibraryIdImagesId404
        | GetApiLibraryIdImagesId422
        | GetApiLibraryIdImagesId500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdImagesId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
    TError = ErrorType<
        | GetApiLibraryIdImagesId401
        | GetApiLibraryIdImagesId403
        | GetApiLibraryIdImagesId404
        | GetApiLibraryIdImagesId422
        | GetApiLibraryIdImagesId500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdImagesId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
    TError = ErrorType<
        | GetApiLibraryIdImagesId401
        | GetApiLibraryIdImagesId403
        | GetApiLibraryIdImagesId404
        | GetApiLibraryIdImagesId422
        | GetApiLibraryIdImagesId500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get image by id
 */

export function useGetApiLibraryIdImagesId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdImagesId>>,
    TError = ErrorType<
        | GetApiLibraryIdImagesId401
        | GetApiLibraryIdImagesId403
        | GetApiLibraryIdImagesId404
        | GetApiLibraryIdImagesId422
        | GetApiLibraryIdImagesId500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdImagesIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdImagesId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdImagesIdQueryOptions(libraryId, id, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
