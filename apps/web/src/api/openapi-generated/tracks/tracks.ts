/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    DeleteApiLibraryIdTracksQueryIndex204,
    DeleteApiLibraryIdTracksQueryIndex401,
    DeleteApiLibraryIdTracksQueryIndex403,
    DeleteApiLibraryIdTracksQueryIndex404,
    DeleteApiLibraryIdTracksQueryIndex500,
    GetApiLibraryIdTracks200,
    GetApiLibraryIdTracks401,
    GetApiLibraryIdTracks403,
    GetApiLibraryIdTracks422,
    GetApiLibraryIdTracks500,
    GetApiLibraryIdTracksCount401,
    GetApiLibraryIdTracksCount403,
    GetApiLibraryIdTracksCount422,
    GetApiLibraryIdTracksCount500,
    GetApiLibraryIdTracksCountParams,
    GetApiLibraryIdTracksId200,
    GetApiLibraryIdTracksId401,
    GetApiLibraryIdTracksId403,
    GetApiLibraryIdTracksId404,
    GetApiLibraryIdTracksId500,
    GetApiLibraryIdTracksIdStream200,
    GetApiLibraryIdTracksIdStream401,
    GetApiLibraryIdTracksIdStream403,
    GetApiLibraryIdTracksIdStream404,
    GetApiLibraryIdTracksIdStream500,
    GetApiLibraryIdTracksParams,
    GetApiLibraryIdTracksQuery200,
    GetApiLibraryIdTracksQuery401,
    GetApiLibraryIdTracksQuery403,
    GetApiLibraryIdTracksQuery422,
    GetApiLibraryIdTracksQuery500,
    GetApiLibraryIdTracksQueryParams,
    GetApiLibraryIdTracksQueryStatus200,
    GetApiLibraryIdTracksQueryStatus401,
    GetApiLibraryIdTracksQueryStatus403,
    GetApiLibraryIdTracksQueryStatus422,
    GetApiLibraryIdTracksQueryStatus500,
    PostApiLibraryIdTracksCountInvalidate204,
    PostApiLibraryIdTracksCountInvalidate401,
    PostApiLibraryIdTracksCountInvalidate403,
    PostApiLibraryIdTracksCountInvalidate422,
    PostApiLibraryIdTracksCountInvalidate500,
    PostApiLibraryIdTracksFavorite204,
    PostApiLibraryIdTracksFavorite401,
    PostApiLibraryIdTracksFavorite403,
    PostApiLibraryIdTracksFavorite422,
    PostApiLibraryIdTracksFavorite500,
    PostApiLibraryIdTracksFavoriteBody,
    PostApiLibraryIdTracksQueryIndex204,
    PostApiLibraryIdTracksQueryIndex401,
    PostApiLibraryIdTracksQueryIndex403,
    PostApiLibraryIdTracksQueryIndex422,
    PostApiLibraryIdTracksQueryIndex500,
    PostApiLibraryIdTracksUnfavorite204,
    PostApiLibraryIdTracksUnfavorite401,
    PostApiLibraryIdTracksUnfavorite403,
    PostApiLibraryIdTracksUnfavorite422,
    PostApiLibraryIdTracksUnfavorite500,
    PostApiLibraryIdTracksUnfavoriteBody,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType, BodyType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all tracks
 */
export const getApiLibraryIdTracks = (
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracks200>(
        { url: `/api/${libraryId}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdTracksQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
) => {
    return [`/api/${libraryId}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdTracksQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdTracks(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracks>>
>;
export type GetApiLibraryIdTracksQueryError = ErrorType<
    | GetApiLibraryIdTracks401
    | GetApiLibraryIdTracks403
    | GetApiLibraryIdTracks422
    | GetApiLibraryIdTracks500
>;

export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks
 */

export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdTracks(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracks>>
>;
export type GetApiLibraryIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracks401
    | GetApiLibraryIdTracks403
    | GetApiLibraryIdTracks422
    | GetApiLibraryIdTracks500
>;

export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks
 */

export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksSuspenseQueryOptions(libraryId, params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get all tracks count
 */
export const getApiLibraryIdTracksCount = (
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/tracks/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdTracksCountQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
) => {
    return [`/api/${libraryId}/tracks/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdTracksCountQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>> = ({
        signal,
    }) => getApiLibraryIdTracksCount(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>
>;
export type GetApiLibraryIdTracksCountQueryError = ErrorType<
    | GetApiLibraryIdTracksCount401
    | GetApiLibraryIdTracksCount403
    | GetApiLibraryIdTracksCount422
    | GetApiLibraryIdTracksCount500
>;

export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks count
 */

export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksCountQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>> = ({
        signal,
    }) => getApiLibraryIdTracksCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>
>;
export type GetApiLibraryIdTracksCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksCount401
    | GetApiLibraryIdTracksCount403
    | GetApiLibraryIdTracksCount422
    | GetApiLibraryIdTracksCount500
>;

export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks count
 */

export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksCountSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Invalidate track count
 */
export const postApiLibraryIdTracksCountInvalidate = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksCountInvalidate204>(
        { url: `/api/${libraryId}/tracks/count/invalidate`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdTracksCountInvalidateMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksCountInvalidate401
        | PostApiLibraryIdTracksCountInvalidate403
        | PostApiLibraryIdTracksCountInvalidate422
        | PostApiLibraryIdTracksCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksCountInvalidate'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return postApiLibraryIdTracksCountInvalidate(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type PostApiLibraryIdTracksCountInvalidateMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>
>;

export type PostApiLibraryIdTracksCountInvalidateMutationError = ErrorType<
    | PostApiLibraryIdTracksCountInvalidate401
    | PostApiLibraryIdTracksCountInvalidate403
    | PostApiLibraryIdTracksCountInvalidate422
    | PostApiLibraryIdTracksCountInvalidate500
>;

/**
 * @summary Invalidate track count
 */
export const usePostApiLibraryIdTracksCountInvalidate = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksCountInvalidate401
        | PostApiLibraryIdTracksCountInvalidate403
        | PostApiLibraryIdTracksCountInvalidate422
        | PostApiLibraryIdTracksCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdTracksCountInvalidateMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Add track favorites by ids
 */
export const postApiLibraryIdTracksFavorite = (
    libraryId: string,
    postApiLibraryIdTracksFavoriteBody: BodyType<PostApiLibraryIdTracksFavoriteBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksFavorite204>(
        {
            url: `/api/${libraryId}/tracks/favorite`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postApiLibraryIdTracksFavoriteBody,
            signal,
        },
        options,
    );
};

export const getPostApiLibraryIdTracksFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksFavorite401
        | PostApiLibraryIdTracksFavorite403
        | PostApiLibraryIdTracksFavorite422
        | PostApiLibraryIdTracksFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksFavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksFavorite>>,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksFavoriteBody> }
    > = (props) => {
        const { libraryId, data } = props ?? {};

        return postApiLibraryIdTracksFavorite(libraryId, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksFavoriteBody> },
        TContext
    >;
};

export type PostApiLibraryIdTracksFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksFavorite>>
>;
export type PostApiLibraryIdTracksFavoriteMutationBody =
    BodyType<PostApiLibraryIdTracksFavoriteBody>;
export type PostApiLibraryIdTracksFavoriteMutationError = ErrorType<
    | PostApiLibraryIdTracksFavorite401
    | PostApiLibraryIdTracksFavorite403
    | PostApiLibraryIdTracksFavorite422
    | PostApiLibraryIdTracksFavorite500
>;

/**
 * @summary Add track favorites by ids
 */
export const usePostApiLibraryIdTracksFavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksFavorite401
        | PostApiLibraryIdTracksFavorite403
        | PostApiLibraryIdTracksFavorite422
        | PostApiLibraryIdTracksFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksFavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    TData,
    TError,
    { libraryId: string; data: BodyType<PostApiLibraryIdTracksFavoriteBody> },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdTracksFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove track favorites by ids
 */
export const postApiLibraryIdTracksUnfavorite = (
    libraryId: string,
    postApiLibraryIdTracksUnfavoriteBody: BodyType<PostApiLibraryIdTracksUnfavoriteBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksUnfavorite204>(
        {
            url: `/api/${libraryId}/tracks/unfavorite`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postApiLibraryIdTracksUnfavoriteBody,
            signal,
        },
        options,
    );
};

export const getPostApiLibraryIdTracksUnfavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksUnfavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksUnfavorite401
        | PostApiLibraryIdTracksUnfavorite403
        | PostApiLibraryIdTracksUnfavorite422
        | PostApiLibraryIdTracksUnfavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksUnfavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksUnfavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksUnfavorite>>,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksUnfavoriteBody> }
    > = (props) => {
        const { libraryId, data } = props ?? {};

        return postApiLibraryIdTracksUnfavorite(libraryId, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksUnfavoriteBody> },
        TContext
    >;
};

export type PostApiLibraryIdTracksUnfavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksUnfavorite>>
>;
export type PostApiLibraryIdTracksUnfavoriteMutationBody =
    BodyType<PostApiLibraryIdTracksUnfavoriteBody>;
export type PostApiLibraryIdTracksUnfavoriteMutationError = ErrorType<
    | PostApiLibraryIdTracksUnfavorite401
    | PostApiLibraryIdTracksUnfavorite403
    | PostApiLibraryIdTracksUnfavorite422
    | PostApiLibraryIdTracksUnfavorite500
>;

/**
 * @summary Remove track favorites by ids
 */
export const usePostApiLibraryIdTracksUnfavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksUnfavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksUnfavorite401
        | PostApiLibraryIdTracksUnfavorite403
        | PostApiLibraryIdTracksUnfavorite422
        | PostApiLibraryIdTracksUnfavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdTracksUnfavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    TData,
    TError,
    { libraryId: string; data: BodyType<PostApiLibraryIdTracksUnfavoriteBody> },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdTracksUnfavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get tracks query
 */
export const getApiLibraryIdTracksQuery = (
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksQuery200>(
        { url: `/api/${libraryId}/tracks/query`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdTracksQueryQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
) => {
    return [`/api/${libraryId}/tracks/query`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdTracksQueryQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>> = ({
        signal,
    }) => getApiLibraryIdTracksQuery(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksQueryQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>
>;
export type GetApiLibraryIdTracksQueryQueryError = ErrorType<
    | GetApiLibraryIdTracksQuery401
    | GetApiLibraryIdTracksQuery403
    | GetApiLibraryIdTracksQuery422
    | GetApiLibraryIdTracksQuery500
>;

export function useGetApiLibraryIdTracksQuery<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQuery<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQuery<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get tracks query
 */

export function useGetApiLibraryIdTracksQuery<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQueryQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksQuerySuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>> = ({
        signal,
    }) => getApiLibraryIdTracksQuery(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksQuerySuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>
>;
export type GetApiLibraryIdTracksQuerySuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksQuery401
    | GetApiLibraryIdTracksQuery403
    | GetApiLibraryIdTracksQuery422
    | GetApiLibraryIdTracksQuery500
>;

export function useGetApiLibraryIdTracksQuerySuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQuerySuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQuerySuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get tracks query
 */

export function useGetApiLibraryIdTracksQuerySuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQuery401
        | GetApiLibraryIdTracksQuery403
        | GetApiLibraryIdTracksQuery422
        | GetApiLibraryIdTracksQuery500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksQueryParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQuery>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQuerySuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get track query status
 */
export const getApiLibraryIdTracksQueryStatus = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksQueryStatus200>(
        { url: `/api/${libraryId}/tracks/query/status`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdTracksQueryStatusQueryKey = (libraryId: string) => {
    return [`/api/${libraryId}/tracks/query/status`] as const;
};

export const getGetApiLibraryIdTracksQueryStatusQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryStatusQueryKey(libraryId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>> = ({
        signal,
    }) => getApiLibraryIdTracksQueryStatus(libraryId, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksQueryStatusQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>
>;
export type GetApiLibraryIdTracksQueryStatusQueryError = ErrorType<
    | GetApiLibraryIdTracksQueryStatus401
    | GetApiLibraryIdTracksQueryStatus403
    | GetApiLibraryIdTracksQueryStatus422
    | GetApiLibraryIdTracksQueryStatus500
>;

export function useGetApiLibraryIdTracksQueryStatus<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQueryStatus<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQueryStatus<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track query status
 */

export function useGetApiLibraryIdTracksQueryStatus<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQueryStatusQueryOptions(libraryId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksQueryStatusSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryStatusQueryKey(libraryId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>> = ({
        signal,
    }) => getApiLibraryIdTracksQueryStatus(libraryId, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksQueryStatusSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>
>;
export type GetApiLibraryIdTracksQueryStatusSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksQueryStatus401
    | GetApiLibraryIdTracksQueryStatus403
    | GetApiLibraryIdTracksQueryStatus422
    | GetApiLibraryIdTracksQueryStatus500
>;

export function useGetApiLibraryIdTracksQueryStatusSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQueryStatusSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksQueryStatusSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track query status
 */

export function useGetApiLibraryIdTracksQueryStatusSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksQueryStatus401
        | GetApiLibraryIdTracksQueryStatus403
        | GetApiLibraryIdTracksQueryStatus422
        | GetApiLibraryIdTracksQueryStatus500
    >,
>(
    libraryId: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksQueryStatus>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQueryStatusSuspenseQueryOptions(
        libraryId,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Start track list indexing
 */
export const postApiLibraryIdTracksQueryIndex = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksQueryIndex204>(
        { url: `/api/${libraryId}/tracks/query/index`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdTracksQueryIndexMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksQueryIndex>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksQueryIndex401
        | PostApiLibraryIdTracksQueryIndex403
        | PostApiLibraryIdTracksQueryIndex422
        | PostApiLibraryIdTracksQueryIndex500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksQueryIndex'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksQueryIndex>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return postApiLibraryIdTracksQueryIndex(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type PostApiLibraryIdTracksQueryIndexMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksQueryIndex>>
>;

export type PostApiLibraryIdTracksQueryIndexMutationError = ErrorType<
    | PostApiLibraryIdTracksQueryIndex401
    | PostApiLibraryIdTracksQueryIndex403
    | PostApiLibraryIdTracksQueryIndex422
    | PostApiLibraryIdTracksQueryIndex500
>;

/**
 * @summary Start track list indexing
 */
export const usePostApiLibraryIdTracksQueryIndex = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksQueryIndex>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksQueryIndex401
        | PostApiLibraryIdTracksQueryIndex403
        | PostApiLibraryIdTracksQueryIndex422
        | PostApiLibraryIdTracksQueryIndex500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdTracksQueryIndexMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Abort track list indexing
 */
export const deleteApiLibraryIdTracksQueryIndex = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<DeleteApiLibraryIdTracksQueryIndex204>(
        { url: `/api/${libraryId}/tracks/query/index`, method: 'DELETE' },
        options,
    );
};

export const getDeleteApiLibraryIdTracksQueryIndexMutationOptions = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdTracksQueryIndex>>,
    TError = ErrorType<
        | DeleteApiLibraryIdTracksQueryIndex401
        | DeleteApiLibraryIdTracksQueryIndex403
        | DeleteApiLibraryIdTracksQueryIndex404
        | DeleteApiLibraryIdTracksQueryIndex500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['deleteApiLibraryIdTracksQueryIndex'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibraryIdTracksQueryIndex>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return deleteApiLibraryIdTracksQueryIndex(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type DeleteApiLibraryIdTracksQueryIndexMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibraryIdTracksQueryIndex>>
>;

export type DeleteApiLibraryIdTracksQueryIndexMutationError = ErrorType<
    | DeleteApiLibraryIdTracksQueryIndex401
    | DeleteApiLibraryIdTracksQueryIndex403
    | DeleteApiLibraryIdTracksQueryIndex404
    | DeleteApiLibraryIdTracksQueryIndex500
>;

/**
 * @summary Abort track list indexing
 */
export const useDeleteApiLibraryIdTracksQueryIndex = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdTracksQueryIndex>>,
    TError = ErrorType<
        | DeleteApiLibraryIdTracksQueryIndex401
        | DeleteApiLibraryIdTracksQueryIndex403
        | DeleteApiLibraryIdTracksQueryIndex404
        | DeleteApiLibraryIdTracksQueryIndex500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getDeleteApiLibraryIdTracksQueryIndexMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get track by id
 */
export const getApiLibraryIdTracksId = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksId200>(
        { url: `/api/${libraryId}/tracks/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdTracksIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/tracks/${id}`] as const;
};

export const getGetApiLibraryIdTracksIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>> = ({
        signal,
    }) => getApiLibraryIdTracksId(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>
>;
export type GetApiLibraryIdTracksIdQueryError = ErrorType<
    | GetApiLibraryIdTracksId401
    | GetApiLibraryIdTracksId403
    | GetApiLibraryIdTracksId404
    | GetApiLibraryIdTracksId500
>;

export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track by id
 */

export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>> = ({
        signal,
    }) => getApiLibraryIdTracksId(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>
>;
export type GetApiLibraryIdTracksIdSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksId401
    | GetApiLibraryIdTracksId403
    | GetApiLibraryIdTracksId404
    | GetApiLibraryIdTracksId500
>;

export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track by id
 */

export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdSuspenseQueryOptions(libraryId, id, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get track stream by id
 */
export const getApiLibraryIdTracksIdStream = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksIdStream200>(
        { url: `/api/${libraryId}/tracks/${id}/stream`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdTracksIdStreamQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/tracks/${id}/stream`] as const;
};

export const getGetApiLibraryIdTracksIdStreamQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdStreamQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>> = ({
        signal,
    }) => getApiLibraryIdTracksIdStream(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdStreamQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>
>;
export type GetApiLibraryIdTracksIdStreamQueryError = ErrorType<
    | GetApiLibraryIdTracksIdStream401
    | GetApiLibraryIdTracksIdStream403
    | GetApiLibraryIdTracksIdStream404
    | GetApiLibraryIdTracksIdStream500
>;

export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track stream by id
 */

export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdStreamQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksIdStreamSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdStreamQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>> = ({
        signal,
    }) => getApiLibraryIdTracksIdStream(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdStreamSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>
>;
export type GetApiLibraryIdTracksIdStreamSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksIdStream401
    | GetApiLibraryIdTracksIdStream403
    | GetApiLibraryIdTracksIdStream404
    | GetApiLibraryIdTracksIdStream500
>;

export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track stream by id
 */

export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdStreamSuspenseQueryOptions(
        libraryId,
        id,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
