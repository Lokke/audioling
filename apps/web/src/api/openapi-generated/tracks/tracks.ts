/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    DeleteApiLibraryIdTracksIdFavorite204,
    DeleteApiLibraryIdTracksIdFavorite401,
    DeleteApiLibraryIdTracksIdFavorite403,
    DeleteApiLibraryIdTracksIdFavorite404,
    DeleteApiLibraryIdTracksIdFavorite500,
    GetApiLibraryIdTracks200,
    GetApiLibraryIdTracks401,
    GetApiLibraryIdTracks403,
    GetApiLibraryIdTracks422,
    GetApiLibraryIdTracks500,
    GetApiLibraryIdTracksCount401,
    GetApiLibraryIdTracksCount403,
    GetApiLibraryIdTracksCount422,
    GetApiLibraryIdTracksCount500,
    GetApiLibraryIdTracksCountParams,
    GetApiLibraryIdTracksId200,
    GetApiLibraryIdTracksId401,
    GetApiLibraryIdTracksId403,
    GetApiLibraryIdTracksId404,
    GetApiLibraryIdTracksId500,
    GetApiLibraryIdTracksIdStream200,
    GetApiLibraryIdTracksIdStream401,
    GetApiLibraryIdTracksIdStream403,
    GetApiLibraryIdTracksIdStream404,
    GetApiLibraryIdTracksIdStream500,
    GetApiLibraryIdTracksParams,
    PostApiLibraryIdTracksCountInvalidate204,
    PostApiLibraryIdTracksCountInvalidate401,
    PostApiLibraryIdTracksCountInvalidate403,
    PostApiLibraryIdTracksCountInvalidate422,
    PostApiLibraryIdTracksCountInvalidate500,
    PostApiLibraryIdTracksIdFavorite204,
    PostApiLibraryIdTracksIdFavorite401,
    PostApiLibraryIdTracksIdFavorite403,
    PostApiLibraryIdTracksIdFavorite404,
    PostApiLibraryIdTracksIdFavorite500,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all tracks
 */
export const getApiLibraryIdTracks = (
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracks200>(
        { url: `/api/${libraryId}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdTracksQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
) => {
    return [`/api/${libraryId}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdTracksQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdTracks(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracks>>
>;
export type GetApiLibraryIdTracksQueryError = ErrorType<
    | GetApiLibraryIdTracks401
    | GetApiLibraryIdTracks403
    | GetApiLibraryIdTracks422
    | GetApiLibraryIdTracks500
>;

export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks
 */

export function useGetApiLibraryIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracks>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdTracks(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracks>>
>;
export type GetApiLibraryIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracks401
    | GetApiLibraryIdTracks403
    | GetApiLibraryIdTracks422
    | GetApiLibraryIdTracks500
>;

export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks
 */

export function useGetApiLibraryIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdTracks401
        | GetApiLibraryIdTracks403
        | GetApiLibraryIdTracks422
        | GetApiLibraryIdTracks500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksSuspenseQueryOptions(libraryId, params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get all tracks count
 */
export const getApiLibraryIdTracksCount = (
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/tracks/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdTracksCountQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
) => {
    return [`/api/${libraryId}/tracks/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdTracksCountQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>> = ({
        signal,
    }) => getApiLibraryIdTracksCount(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>
>;
export type GetApiLibraryIdTracksCountQueryError = ErrorType<
    | GetApiLibraryIdTracksCount401
    | GetApiLibraryIdTracksCount403
    | GetApiLibraryIdTracksCount422
    | GetApiLibraryIdTracksCount500
>;

export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks count
 */

export function useGetApiLibraryIdTracksCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksCountQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>> = ({
        signal,
    }) => getApiLibraryIdTracksCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>
>;
export type GetApiLibraryIdTracksCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksCount401
    | GetApiLibraryIdTracksCount403
    | GetApiLibraryIdTracksCount422
    | GetApiLibraryIdTracksCount500
>;

export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tracks count
 */

export function useGetApiLibraryIdTracksCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksCount401
        | GetApiLibraryIdTracksCount403
        | GetApiLibraryIdTracksCount422
        | GetApiLibraryIdTracksCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdTracksCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksCountSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Invalidate track count
 */
export const postApiLibraryIdTracksCountInvalidate = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksCountInvalidate204>(
        { url: `/api/${libraryId}/tracks/count/invalidate`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdTracksCountInvalidateMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksCountInvalidate401
        | PostApiLibraryIdTracksCountInvalidate403
        | PostApiLibraryIdTracksCountInvalidate422
        | PostApiLibraryIdTracksCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksCountInvalidate'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return postApiLibraryIdTracksCountInvalidate(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type PostApiLibraryIdTracksCountInvalidateMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>
>;

export type PostApiLibraryIdTracksCountInvalidateMutationError = ErrorType<
    | PostApiLibraryIdTracksCountInvalidate401
    | PostApiLibraryIdTracksCountInvalidate403
    | PostApiLibraryIdTracksCountInvalidate422
    | PostApiLibraryIdTracksCountInvalidate500
>;

/**
 * @summary Invalidate track count
 */
export const usePostApiLibraryIdTracksCountInvalidate = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksCountInvalidate401
        | PostApiLibraryIdTracksCountInvalidate403
        | PostApiLibraryIdTracksCountInvalidate422
        | PostApiLibraryIdTracksCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdTracksCountInvalidateMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get track by id
 */
export const getApiLibraryIdTracksId = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksId200>(
        { url: `/api/${libraryId}/tracks/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdTracksIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/tracks/${id}`] as const;
};

export const getGetApiLibraryIdTracksIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>> = ({
        signal,
    }) => getApiLibraryIdTracksId(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdTracksIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>
>;
export type GetApiLibraryIdTracksIdQueryError = ErrorType<
    | GetApiLibraryIdTracksId401
    | GetApiLibraryIdTracksId403
    | GetApiLibraryIdTracksId404
    | GetApiLibraryIdTracksId500
>;

export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track by id
 */

export function useGetApiLibraryIdTracksId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksId>>> = ({
        signal,
    }) => getApiLibraryIdTracksId(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksId>>
>;
export type GetApiLibraryIdTracksIdSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksId401
    | GetApiLibraryIdTracksId403
    | GetApiLibraryIdTracksId404
    | GetApiLibraryIdTracksId500
>;

export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track by id
 */

export function useGetApiLibraryIdTracksIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksId401
        | GetApiLibraryIdTracksId403
        | GetApiLibraryIdTracksId404
        | GetApiLibraryIdTracksId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdSuspenseQueryOptions(libraryId, id, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get track stream by id
 */
export const getApiLibraryIdTracksIdStream = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdTracksIdStream200>(
        { url: `/api/${libraryId}/tracks/${id}/stream`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdTracksIdStreamQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/tracks/${id}/stream`] as const;
};

export const getGetApiLibraryIdTracksIdStreamQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdStreamQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>> = ({
        signal,
    }) => getApiLibraryIdTracksIdStream(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdStreamQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>
>;
export type GetApiLibraryIdTracksIdStreamQueryError = ErrorType<
    | GetApiLibraryIdTracksIdStream401
    | GetApiLibraryIdTracksIdStream403
    | GetApiLibraryIdTracksIdStream404
    | GetApiLibraryIdTracksIdStream500
>;

export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track stream by id
 */

export function useGetApiLibraryIdTracksIdStream<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdStreamQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdTracksIdStreamSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdTracksIdStreamQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>> = ({
        signal,
    }) => getApiLibraryIdTracksIdStream(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdTracksIdStreamSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>
>;
export type GetApiLibraryIdTracksIdStreamSuspenseQueryError = ErrorType<
    | GetApiLibraryIdTracksIdStream401
    | GetApiLibraryIdTracksIdStream403
    | GetApiLibraryIdTracksIdStream404
    | GetApiLibraryIdTracksIdStream500
>;

export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get track stream by id
 */

export function useGetApiLibraryIdTracksIdStreamSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
    TError = ErrorType<
        | GetApiLibraryIdTracksIdStream401
        | GetApiLibraryIdTracksIdStream403
        | GetApiLibraryIdTracksIdStream404
        | GetApiLibraryIdTracksIdStream500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdTracksIdStream>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdTracksIdStreamSuspenseQueryOptions(
        libraryId,
        id,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Add track favorite by id
 */
export const postApiLibraryIdTracksIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdTracksIdFavorite204>(
        { url: `/api/${libraryId}/tracks/${id}/favorite`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdTracksIdFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksIdFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksIdFavorite401
        | PostApiLibraryIdTracksIdFavorite403
        | PostApiLibraryIdTracksIdFavorite404
        | PostApiLibraryIdTracksIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdTracksIdFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdTracksIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return postApiLibraryIdTracksIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
};

export type PostApiLibraryIdTracksIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdTracksIdFavorite>>
>;

export type PostApiLibraryIdTracksIdFavoriteMutationError = ErrorType<
    | PostApiLibraryIdTracksIdFavorite401
    | PostApiLibraryIdTracksIdFavorite403
    | PostApiLibraryIdTracksIdFavorite404
    | PostApiLibraryIdTracksIdFavorite500
>;

/**
 * @summary Add track favorite by id
 */
export const usePostApiLibraryIdTracksIdFavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdTracksIdFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdTracksIdFavorite401
        | PostApiLibraryIdTracksIdFavorite403
        | PostApiLibraryIdTracksIdFavorite404
        | PostApiLibraryIdTracksIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string; id: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdTracksIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove track favorite by id
 */
export const deleteApiLibraryIdTracksIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<DeleteApiLibraryIdTracksIdFavorite204>(
        { url: `/api/${libraryId}/tracks/${id}/favorite`, method: 'DELETE' },
        options,
    );
};

export const getDeleteApiLibraryIdTracksIdFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdTracksIdFavorite>>,
    TError = ErrorType<
        | DeleteApiLibraryIdTracksIdFavorite401
        | DeleteApiLibraryIdTracksIdFavorite403
        | DeleteApiLibraryIdTracksIdFavorite404
        | DeleteApiLibraryIdTracksIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['deleteApiLibraryIdTracksIdFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibraryIdTracksIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return deleteApiLibraryIdTracksIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
};

export type DeleteApiLibraryIdTracksIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibraryIdTracksIdFavorite>>
>;

export type DeleteApiLibraryIdTracksIdFavoriteMutationError = ErrorType<
    | DeleteApiLibraryIdTracksIdFavorite401
    | DeleteApiLibraryIdTracksIdFavorite403
    | DeleteApiLibraryIdTracksIdFavorite404
    | DeleteApiLibraryIdTracksIdFavorite500
>;

/**
 * @summary Remove track favorite by id
 */
export const useDeleteApiLibraryIdTracksIdFavorite = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdTracksIdFavorite>>,
    TError = ErrorType<
        | DeleteApiLibraryIdTracksIdFavorite401
        | DeleteApiLibraryIdTracksIdFavorite403
        | DeleteApiLibraryIdTracksIdFavorite404
        | DeleteApiLibraryIdTracksIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string; id: string }, TContext> => {
    const mutationOptions = getDeleteApiLibraryIdTracksIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
