/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useSuspenseInfiniteQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseMutationResult,
    UseSuspenseInfiniteQueryOptions,
    UseSuspenseInfiniteQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    DeleteApiLibraryIdAlbumArtistsIdFavorite204,
    DeleteApiLibraryIdAlbumArtistsIdFavorite401,
    DeleteApiLibraryIdAlbumArtistsIdFavorite403,
    DeleteApiLibraryIdAlbumArtistsIdFavorite404,
    DeleteApiLibraryIdAlbumArtistsIdFavorite500,
    GetApiLibraryIdAlbumArtists200,
    GetApiLibraryIdAlbumArtists401,
    GetApiLibraryIdAlbumArtists403,
    GetApiLibraryIdAlbumArtists422,
    GetApiLibraryIdAlbumArtists500,
    GetApiLibraryIdAlbumArtistsId200,
    GetApiLibraryIdAlbumArtistsId401,
    GetApiLibraryIdAlbumArtistsId403,
    GetApiLibraryIdAlbumArtistsId404,
    GetApiLibraryIdAlbumArtistsId500,
    GetApiLibraryIdAlbumArtistsIdAlbums200,
    GetApiLibraryIdAlbumArtistsIdAlbums401,
    GetApiLibraryIdAlbumArtistsIdAlbums403,
    GetApiLibraryIdAlbumArtistsIdAlbums404,
    GetApiLibraryIdAlbumArtistsIdAlbums422,
    GetApiLibraryIdAlbumArtistsIdAlbums500,
    GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    GetApiLibraryIdAlbumArtistsIdTracks200,
    GetApiLibraryIdAlbumArtistsIdTracks401,
    GetApiLibraryIdAlbumArtistsIdTracks403,
    GetApiLibraryIdAlbumArtistsIdTracks404,
    GetApiLibraryIdAlbumArtistsIdTracks422,
    GetApiLibraryIdAlbumArtistsIdTracks500,
    GetApiLibraryIdAlbumArtistsIdTracksParams,
    GetApiLibraryIdAlbumArtistsParams,
    PostApiLibraryIdAlbumArtistsIdFavorite204,
    PostApiLibraryIdAlbumArtistsIdFavorite401,
    PostApiLibraryIdAlbumArtistsIdFavorite403,
    PostApiLibraryIdAlbumArtistsIdFavorite404,
    PostApiLibraryIdAlbumArtistsIdFavorite500,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all album artists
 */
export const getApiLibraryIdAlbumArtists = (
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumArtists200>(
        { url: `/api/${libraryId}/album-artists`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumArtistsQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
) => {
    return [`/api/${libraryId}/album-artists`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>> = ({
        signal,
    }) => getApiLibraryIdAlbumArtists(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, enabled: !!libraryId, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>
>;
export type GetApiLibraryIdAlbumArtistsSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtists401
    | GetApiLibraryIdAlbumArtists403
    | GetApiLibraryIdAlbumArtists422
    | GetApiLibraryIdAlbumArtists500
>;

export function useGetApiLibraryIdAlbumArtistsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get all album artists
 */

export function useGetApiLibraryIdAlbumArtistsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumArtistsSuspenseInfiniteQueryOptions = <
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        GetApiLibraryIdAlbumArtistsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsQueryKey(libraryId, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsParams['offset']
    > = ({ signal, pageParam }) =>
        getApiLibraryIdAlbumArtists(
            libraryId,
            { ...params, offset: pageParam || params?.['offset'] },
            requestOptions,
            signal,
        );

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        ...queryOptions,
    } as UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsParams['offset']
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsSuspenseInfiniteQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>
>;
export type GetApiLibraryIdAlbumArtistsSuspenseInfiniteQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtists401
    | GetApiLibraryIdAlbumArtists403
    | GetApiLibraryIdAlbumArtists422
    | GetApiLibraryIdAlbumArtists500
>;

export function useGetApiLibraryIdAlbumArtistsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        GetApiLibraryIdAlbumArtistsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options: {
        query: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        GetApiLibraryIdAlbumArtistsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        GetApiLibraryIdAlbumArtistsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get all album artists
 */

export function useGetApiLibraryIdAlbumArtistsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        GetApiLibraryIdAlbumArtistsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsSuspenseInfiniteQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseInfiniteQuery(queryOptions) as UseSuspenseInfiniteQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist by id
 */
export const getApiLibraryIdAlbumArtistsId = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumArtistsId200>(
        { url: `/api/${libraryId}/album-artists/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumArtistsIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/album-artists/${id}`] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumArtistsId(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>
>;
export type GetApiLibraryIdAlbumArtistsIdSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsId401
    | GetApiLibraryIdAlbumArtistsId403
    | GetApiLibraryIdAlbumArtistsId404
    | GetApiLibraryIdAlbumArtistsId500
>;

export function useGetApiLibraryIdAlbumArtistsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist by id
 */

export function useGetApiLibraryIdAlbumArtistsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdSuspenseQueryOptions(
        libraryId,
        id,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumArtistsIdSuspenseInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumArtistsId(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdSuspenseInfiniteQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>
>;
export type GetApiLibraryIdAlbumArtistsIdSuspenseInfiniteQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsId401
    | GetApiLibraryIdAlbumArtistsId403
    | GetApiLibraryIdAlbumArtistsId404
    | GetApiLibraryIdAlbumArtistsId500
>;

export function useGetApiLibraryIdAlbumArtistsIdSuspenseInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdSuspenseInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdSuspenseInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist by id
 */

export function useGetApiLibraryIdAlbumArtistsIdSuspenseInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdSuspenseInfiniteQueryOptions(
        libraryId,
        id,
        options,
    );

    const query = useSuspenseInfiniteQuery(queryOptions) as UseSuspenseInfiniteQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist albums by id
 */
export const getApiLibraryIdAlbumArtistsIdAlbums = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumArtistsIdAlbums200>(
        { url: `/api/${libraryId}/album-artists/${id}/albums`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumArtistsIdAlbumsQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
) => {
    return [`/api/${libraryId}/album-artists/${id}/albums`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdAlbumsQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>
    > = ({ signal }) =>
        getApiLibraryIdAlbumArtistsIdAlbums(libraryId, id, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdAlbumsSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>
>;
export type GetApiLibraryIdAlbumArtistsIdAlbumsSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsIdAlbums401
    | GetApiLibraryIdAlbumArtistsIdAlbums403
    | GetApiLibraryIdAlbumArtistsIdAlbums404
    | GetApiLibraryIdAlbumArtistsIdAlbums422
    | GetApiLibraryIdAlbumArtistsIdAlbums500
>;

export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist albums by id
 */

export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfiniteQueryOptions = <
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdAlbumsQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    > = ({ signal, pageParam }) =>
        getApiLibraryIdAlbumArtistsIdAlbums(
            libraryId,
            id,
            { ...params, offset: pageParam || params?.['offset'] },
            requestOptions,
            signal,
        );

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfiniteQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>
>;
export type GetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfiniteQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsIdAlbums401
    | GetApiLibraryIdAlbumArtistsIdAlbums403
    | GetApiLibraryIdAlbumArtistsIdAlbums404
    | GetApiLibraryIdAlbumArtistsIdAlbums422
    | GetApiLibraryIdAlbumArtistsIdAlbums500
>;

export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options: {
        query: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist albums by id
 */

export function useGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdAlbumsParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdAlbumsSuspenseInfiniteQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseInfiniteQuery(queryOptions) as UseSuspenseInfiniteQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist tracks by id
 */
export const getApiLibraryIdAlbumArtistsIdTracks = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumArtistsIdTracks200>(
        { url: `/api/${libraryId}/album-artists/${id}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumArtistsIdTracksQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
) => {
    return [`/api/${libraryId}/album-artists/${id}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>
    > = ({ signal }) =>
        getApiLibraryIdAlbumArtistsIdTracks(libraryId, id, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>
>;
export type GetApiLibraryIdAlbumArtistsIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsIdTracks401
    | GetApiLibraryIdAlbumArtistsIdTracks403
    | GetApiLibraryIdAlbumArtistsIdTracks404
    | GetApiLibraryIdAlbumArtistsIdTracks422
    | GetApiLibraryIdAlbumArtistsIdTracks500
>;

export function useGetApiLibraryIdAlbumArtistsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist tracks by id
 */

export function useGetApiLibraryIdAlbumArtistsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdTracksSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfiniteQueryOptions = <
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    > = ({ signal, pageParam }) =>
        getApiLibraryIdAlbumArtistsIdTracks(
            libraryId,
            id,
            { ...params, offset: pageParam || params?.['offset'] },
            requestOptions,
            signal,
        );

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        ...queryOptions,
    } as UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        QueryKey,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdTracksSuspenseInfiniteQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>
>;
export type GetApiLibraryIdAlbumArtistsIdTracksSuspenseInfiniteQueryError = ErrorType<
    | GetApiLibraryIdAlbumArtistsIdTracks401
    | GetApiLibraryIdAlbumArtistsIdTracks403
    | GetApiLibraryIdAlbumArtistsIdTracks404
    | GetApiLibraryIdAlbumArtistsIdTracks422
    | GetApiLibraryIdAlbumArtistsIdTracks500
>;

export function useGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist tracks by id
 */

export function useGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfinite<
    TData = InfiniteData<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
    >,
    TError = ErrorType<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseInfiniteQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData,
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                QueryKey,
                GetApiLibraryIdAlbumArtistsIdTracksParams['offset']
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdTracksSuspenseInfiniteQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseInfiniteQuery(queryOptions) as UseSuspenseInfiniteQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Add album artist favorite by id
 */
export const postApiLibraryIdAlbumArtistsIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<PostApiLibraryIdAlbumArtistsIdFavorite204>(
        { url: `/api/${libraryId}/album-artists/${id}/favorite`, method: 'POST' },
        options,
    );
};

export const getPostApiLibraryIdAlbumArtistsIdFavoriteMutationOptions = <
    TError = ErrorType<
        | PostApiLibraryIdAlbumArtistsIdFavorite401
        | PostApiLibraryIdAlbumArtistsIdFavorite403
        | PostApiLibraryIdAlbumArtistsIdFavorite404
        | PostApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { libraryId: string; id: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return postApiLibraryIdAlbumArtistsIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiLibraryIdAlbumArtistsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>
>;

export type PostApiLibraryIdAlbumArtistsIdFavoriteMutationError = ErrorType<
    | PostApiLibraryIdAlbumArtistsIdFavorite401
    | PostApiLibraryIdAlbumArtistsIdFavorite403
    | PostApiLibraryIdAlbumArtistsIdFavorite404
    | PostApiLibraryIdAlbumArtistsIdFavorite500
>;

/**
 * @summary Add album artist favorite by id
 */
export const usePostApiLibraryIdAlbumArtistsIdFavorite = <
    TError = ErrorType<
        | PostApiLibraryIdAlbumArtistsIdFavorite401
        | PostApiLibraryIdAlbumArtistsIdFavorite403
        | PostApiLibraryIdAlbumArtistsIdFavorite404
        | PostApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { libraryId: string; id: string },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdAlbumArtistsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove album artist favorite by id
 */
export const deleteApiLibraryIdAlbumArtistsIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<DeleteApiLibraryIdAlbumArtistsIdFavorite204>(
        { url: `/api/${libraryId}/album-artists/${id}/favorite`, method: 'DELETE' },
        options,
    );
};

export const getDeleteApiLibraryIdAlbumArtistsIdFavoriteMutationOptions = <
    TError = ErrorType<
        | DeleteApiLibraryIdAlbumArtistsIdFavorite401
        | DeleteApiLibraryIdAlbumArtistsIdFavorite403
        | DeleteApiLibraryIdAlbumArtistsIdFavorite404
        | DeleteApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { libraryId: string; id: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return deleteApiLibraryIdAlbumArtistsIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiLibraryIdAlbumArtistsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>
>;

export type DeleteApiLibraryIdAlbumArtistsIdFavoriteMutationError = ErrorType<
    | DeleteApiLibraryIdAlbumArtistsIdFavorite401
    | DeleteApiLibraryIdAlbumArtistsIdFavorite403
    | DeleteApiLibraryIdAlbumArtistsIdFavorite404
    | DeleteApiLibraryIdAlbumArtistsIdFavorite500
>;

/**
 * @summary Remove album artist favorite by id
 */
export const useDeleteApiLibraryIdAlbumArtistsIdFavorite = <
    TError = ErrorType<
        | DeleteApiLibraryIdAlbumArtistsIdFavorite401
        | DeleteApiLibraryIdAlbumArtistsIdFavorite403
        | DeleteApiLibraryIdAlbumArtistsIdFavorite404
        | DeleteApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { libraryId: string; id: string },
    TContext
> => {
    const mutationOptions = getDeleteApiLibraryIdAlbumArtistsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
