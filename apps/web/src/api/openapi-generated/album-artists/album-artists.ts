/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
    DeleteApiLibraryIdAlbumArtistsIdFavorite204,
    DeleteApiLibraryIdAlbumArtistsIdFavorite401,
    DeleteApiLibraryIdAlbumArtistsIdFavorite403,
    DeleteApiLibraryIdAlbumArtistsIdFavorite404,
    DeleteApiLibraryIdAlbumArtistsIdFavorite500,
    GetApiLibraryIdAlbumArtists200,
    GetApiLibraryIdAlbumArtists401,
    GetApiLibraryIdAlbumArtists403,
    GetApiLibraryIdAlbumArtists422,
    GetApiLibraryIdAlbumArtists500,
    GetApiLibraryIdAlbumArtistsId200,
    GetApiLibraryIdAlbumArtistsId401,
    GetApiLibraryIdAlbumArtistsId403,
    GetApiLibraryIdAlbumArtistsId404,
    GetApiLibraryIdAlbumArtistsId500,
    GetApiLibraryIdAlbumArtistsIdAlbums200,
    GetApiLibraryIdAlbumArtistsIdAlbums401,
    GetApiLibraryIdAlbumArtistsIdAlbums403,
    GetApiLibraryIdAlbumArtistsIdAlbums404,
    GetApiLibraryIdAlbumArtistsIdAlbums422,
    GetApiLibraryIdAlbumArtistsIdAlbums500,
    GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    GetApiLibraryIdAlbumArtistsIdTracks200,
    GetApiLibraryIdAlbumArtistsIdTracks401,
    GetApiLibraryIdAlbumArtistsIdTracks403,
    GetApiLibraryIdAlbumArtistsIdTracks404,
    GetApiLibraryIdAlbumArtistsIdTracks422,
    GetApiLibraryIdAlbumArtistsIdTracks500,
    GetApiLibraryIdAlbumArtistsIdTracksParams,
    GetApiLibraryIdAlbumArtistsParams,
    PostApiLibraryIdAlbumArtistsIdFavorite204,
    PostApiLibraryIdAlbumArtistsIdFavorite401,
    PostApiLibraryIdAlbumArtistsIdFavorite403,
    PostApiLibraryIdAlbumArtistsIdFavorite404,
    PostApiLibraryIdAlbumArtistsIdFavorite500,
} from '../audioling-openapi-client.schemas.ts';

/**
 * @summary Get all album artists
 */
export const getApiLibraryIdAlbumArtists = (
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiLibraryIdAlbumArtists200>> => {
    return axios.get(`/api/${libraryId}/album-artists`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetApiLibraryIdAlbumArtistsQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
) => {
    return [`/api/${libraryId}/album-artists`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>> = ({
        signal,
    }) => getApiLibraryIdAlbumArtists(libraryId, params, { signal, ...axiosOptions });

    return { enabled: !!libraryId, queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>
>;
export type GetApiLibraryIdAlbumArtistsQueryError = AxiosError<
    | GetApiLibraryIdAlbumArtists401
    | GetApiLibraryIdAlbumArtists403
    | GetApiLibraryIdAlbumArtists422
    | GetApiLibraryIdAlbumArtists500
>;

export function useGetApiLibraryIdAlbumArtists<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options: {
        axios?: AxiosRequestConfig;
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtists<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtists<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get all album artists
 */

export function useGetApiLibraryIdAlbumArtists<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtists401
        | GetApiLibraryIdAlbumArtists403
        | GetApiLibraryIdAlbumArtists422
        | GetApiLibraryIdAlbumArtists500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumArtistsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtists>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist by id
 */
export const getApiLibraryIdAlbumArtistsId = (
    libraryId: string,
    id: string,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiLibraryIdAlbumArtistsId200>> => {
    return axios.get(`/api/${libraryId}/album-artists/${id}`, options);
};

export const getGetApiLibraryIdAlbumArtistsIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/album-artists/${id}`] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumArtistsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumArtistsId(libraryId, id, { signal, ...axiosOptions });

    return { enabled: !!(libraryId && id), queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>
>;
export type GetApiLibraryIdAlbumArtistsIdQueryError = AxiosError<
    | GetApiLibraryIdAlbumArtistsId401
    | GetApiLibraryIdAlbumArtistsId403
    | GetApiLibraryIdAlbumArtistsId404
    | GetApiLibraryIdAlbumArtistsId500
>;

export function useGetApiLibraryIdAlbumArtistsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        axios?: AxiosRequestConfig;
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist by id
 */

export function useGetApiLibraryIdAlbumArtistsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsId401
        | GetApiLibraryIdAlbumArtistsId403
        | GetApiLibraryIdAlbumArtistsId404
        | GetApiLibraryIdAlbumArtistsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsId>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist albums by id
 */
export const getApiLibraryIdAlbumArtistsIdAlbums = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiLibraryIdAlbumArtistsIdAlbums200>> => {
    return axios.get(`/api/${libraryId}/album-artists/${id}/albums`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetApiLibraryIdAlbumArtistsIdAlbumsQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
) => {
    return [`/api/${libraryId}/album-artists/${id}/albums`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdAlbumsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdAlbumsQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>
    > = ({ signal }) =>
        getApiLibraryIdAlbumArtistsIdAlbums(libraryId, id, params, { signal, ...axiosOptions });

    return { enabled: !!(libraryId && id), queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdAlbumsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>
>;
export type GetApiLibraryIdAlbumArtistsIdAlbumsQueryError = AxiosError<
    | GetApiLibraryIdAlbumArtistsIdAlbums401
    | GetApiLibraryIdAlbumArtistsIdAlbums403
    | GetApiLibraryIdAlbumArtistsIdAlbums404
    | GetApiLibraryIdAlbumArtistsIdAlbums422
    | GetApiLibraryIdAlbumArtistsIdAlbums500
>;

export function useGetApiLibraryIdAlbumArtistsIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options: {
        axios?: AxiosRequestConfig;
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist albums by id
 */

export function useGetApiLibraryIdAlbumArtistsIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdAlbums401
        | GetApiLibraryIdAlbumArtistsIdAlbums403
        | GetApiLibraryIdAlbumArtistsIdAlbums404
        | GetApiLibraryIdAlbumArtistsIdAlbums422
        | GetApiLibraryIdAlbumArtistsIdAlbums500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdAlbumsParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdAlbums>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdAlbumsQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album artist tracks by id
 */
export const getApiLibraryIdAlbumArtistsIdTracks = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiLibraryIdAlbumArtistsIdTracks200>> => {
    return axios.get(`/api/${libraryId}/album-artists/${id}/tracks`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetApiLibraryIdAlbumArtistsIdTracksQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
) => {
    return [`/api/${libraryId}/album-artists/${id}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumArtistsIdTracksQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiLibraryIdAlbumArtistsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>
    > = ({ signal }) =>
        getApiLibraryIdAlbumArtistsIdTracks(libraryId, id, params, { signal, ...axiosOptions });

    return { enabled: !!(libraryId && id), queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiLibraryIdAlbumArtistsIdTracksQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>
>;
export type GetApiLibraryIdAlbumArtistsIdTracksQueryError = AxiosError<
    | GetApiLibraryIdAlbumArtistsIdTracks401
    | GetApiLibraryIdAlbumArtistsIdTracks403
    | GetApiLibraryIdAlbumArtistsIdTracks404
    | GetApiLibraryIdAlbumArtistsIdTracks422
    | GetApiLibraryIdAlbumArtistsIdTracks500
>;

export function useGetApiLibraryIdAlbumArtistsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options: {
        axios?: AxiosRequestConfig;
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiLibraryIdAlbumArtistsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get album artist tracks by id
 */

export function useGetApiLibraryIdAlbumArtistsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
    TError = AxiosError<
        | GetApiLibraryIdAlbumArtistsIdTracks401
        | GetApiLibraryIdAlbumArtistsIdTracks403
        | GetApiLibraryIdAlbumArtistsIdTracks404
        | GetApiLibraryIdAlbumArtistsIdTracks422
        | GetApiLibraryIdAlbumArtistsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumArtistsIdTracksParams,
    options?: {
        axios?: AxiosRequestConfig;
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumArtistsIdTracks>>,
                TError,
                TData
            >
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiLibraryIdAlbumArtistsIdTracksQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Add album artist favorite by id
 */
export const postApiLibraryIdAlbumArtistsIdFavorite = (
    libraryId: string,
    id: string,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiLibraryIdAlbumArtistsIdFavorite204>> => {
    return axios.post(`/api/${libraryId}/album-artists/${id}/favorite`, undefined, options);
};

export const getPostApiLibraryIdAlbumArtistsIdFavoriteMutationOptions = <
    TError = AxiosError<
        | PostApiLibraryIdAlbumArtistsIdFavorite401
        | PostApiLibraryIdAlbumArtistsIdFavorite403
        | PostApiLibraryIdAlbumArtistsIdFavorite404
        | PostApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    axios?: AxiosRequestConfig;
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { id: string; libraryId: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { id: string; libraryId: string },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        { id: string; libraryId: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return postApiLibraryIdAlbumArtistsIdFavorite(libraryId, id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiLibraryIdAlbumArtistsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>
>;

export type PostApiLibraryIdAlbumArtistsIdFavoriteMutationError = AxiosError<
    | PostApiLibraryIdAlbumArtistsIdFavorite401
    | PostApiLibraryIdAlbumArtistsIdFavorite403
    | PostApiLibraryIdAlbumArtistsIdFavorite404
    | PostApiLibraryIdAlbumArtistsIdFavorite500
>;

/**
 * @summary Add album artist favorite by id
 */
export const usePostApiLibraryIdAlbumArtistsIdFavorite = <
    TError = AxiosError<
        | PostApiLibraryIdAlbumArtistsIdFavorite401
        | PostApiLibraryIdAlbumArtistsIdFavorite403
        | PostApiLibraryIdAlbumArtistsIdFavorite404
        | PostApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    axios?: AxiosRequestConfig;
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { id: string; libraryId: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { id: string; libraryId: string },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdAlbumArtistsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove album artist favorite by id
 */
export const deleteApiLibraryIdAlbumArtistsIdFavorite = (
    libraryId: string,
    id: string,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteApiLibraryIdAlbumArtistsIdFavorite204>> => {
    return axios.delete(`/api/${libraryId}/album-artists/${id}/favorite`, options);
};

export const getDeleteApiLibraryIdAlbumArtistsIdFavoriteMutationOptions = <
    TError = AxiosError<
        | DeleteApiLibraryIdAlbumArtistsIdFavorite401
        | DeleteApiLibraryIdAlbumArtistsIdFavorite403
        | DeleteApiLibraryIdAlbumArtistsIdFavorite404
        | DeleteApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    axios?: AxiosRequestConfig;
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { id: string; libraryId: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { id: string; libraryId: string },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        { id: string; libraryId: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return deleteApiLibraryIdAlbumArtistsIdFavorite(libraryId, id, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiLibraryIdAlbumArtistsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>
>;

export type DeleteApiLibraryIdAlbumArtistsIdFavoriteMutationError = AxiosError<
    | DeleteApiLibraryIdAlbumArtistsIdFavorite401
    | DeleteApiLibraryIdAlbumArtistsIdFavorite403
    | DeleteApiLibraryIdAlbumArtistsIdFavorite404
    | DeleteApiLibraryIdAlbumArtistsIdFavorite500
>;

/**
 * @summary Remove album artist favorite by id
 */
export const useDeleteApiLibraryIdAlbumArtistsIdFavorite = <
    TError = AxiosError<
        | DeleteApiLibraryIdAlbumArtistsIdFavorite401
        | DeleteApiLibraryIdAlbumArtistsIdFavorite403
        | DeleteApiLibraryIdAlbumArtistsIdFavorite404
        | DeleteApiLibraryIdAlbumArtistsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    axios?: AxiosRequestConfig;
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
        TError,
        { id: string; libraryId: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumArtistsIdFavorite>>,
    TError,
    { id: string; libraryId: string },
    TContext
> => {
    const mutationOptions = getDeleteApiLibraryIdAlbumArtistsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
