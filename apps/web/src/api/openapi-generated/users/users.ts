/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useSuspenseQuery } from '@tanstack/react-query';
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseMutationResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    DeleteApiUsersId204,
    DeleteApiUsersId401,
    DeleteApiUsersId403,
    DeleteApiUsersId404,
    DeleteApiUsersId500,
    GetApiUsers200,
    GetApiUsers401,
    GetApiUsers403,
    GetApiUsers422,
    GetApiUsers500,
    GetApiUsersId200,
    GetApiUsersId401,
    GetApiUsersId403,
    GetApiUsersId404,
    GetApiUsersId500,
    GetApiUsersParams,
    PostApiUsers201,
    PostApiUsers400,
    PostApiUsers401,
    PostApiUsers403,
    PostApiUsers409,
    PostApiUsers422,
    PostApiUsers500,
    PostApiUsersBody,
    PutApiUsersId200,
    PutApiUsersId400,
    PutApiUsersId401,
    PutApiUsersId403,
    PutApiUsersId404,
    PutApiUsersId422,
    PutApiUsersId500,
    PutApiUsersIdBody,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType, BodyType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all users
 */
export const getApiUsers = (
    params: GetApiUsersParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiUsers200>(
        { url: `/api/users`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiUsersQueryKey = (params: GetApiUsersParams) => {
    return [`/api/users`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsersSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiUsers>>,
    TError = ErrorType<GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500>,
>(
    params: GetApiUsersParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) =>
        getApiUsers(params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiUsers>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiUsersSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>;
export type GetApiUsersSuspenseQueryError = ErrorType<
    GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500
>;

export function useGetApiUsersSuspense<
    TData = Awaited<ReturnType<typeof getApiUsers>>,
    TError = ErrorType<GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500>,
>(
    params: GetApiUsersParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersSuspense<
    TData = Awaited<ReturnType<typeof getApiUsers>>,
    TError = ErrorType<GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500>,
>(
    params: GetApiUsersParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersSuspense<
    TData = Awaited<ReturnType<typeof getApiUsers>>,
    TError = ErrorType<GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500>,
>(
    params: GetApiUsersParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get all users
 */

export function useGetApiUsersSuspense<
    TData = Awaited<ReturnType<typeof getApiUsers>>,
    TError = ErrorType<GetApiUsers401 | GetApiUsers403 | GetApiUsers422 | GetApiUsers500>,
>(
    params: GetApiUsersParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiUsersSuspenseQueryOptions(params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Create user
 */
export const postApiUsers = (
    postApiUsersBody: BodyType<PostApiUsersBody>,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<PostApiUsers201>(
        {
            url: `/api/users`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postApiUsersBody,
        },
        options,
    );
};

export const getPostApiUsersMutationOptions = <
    TError = ErrorType<
        | PostApiUsers400
        | PostApiUsers401
        | PostApiUsers403
        | PostApiUsers409
        | PostApiUsers422
        | PostApiUsers500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        { data: BodyType<PostApiUsersBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsers>>,
    TError,
    { data: BodyType<PostApiUsersBody> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiUsers>>,
        { data: BodyType<PostApiUsersBody> }
    > = (props) => {
        const { data } = props ?? {};

        return postApiUsers(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>;
export type PostApiUsersMutationBody = BodyType<PostApiUsersBody>;
export type PostApiUsersMutationError = ErrorType<
    | PostApiUsers400
    | PostApiUsers401
    | PostApiUsers403
    | PostApiUsers409
    | PostApiUsers422
    | PostApiUsers500
>;

/**
 * @summary Create user
 */
export const usePostApiUsers = <
    TError = ErrorType<
        | PostApiUsers400
        | PostApiUsers401
        | PostApiUsers403
        | PostApiUsers409
        | PostApiUsers422
        | PostApiUsers500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        { data: BodyType<PostApiUsersBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiUsers>>,
    TError,
    { data: BodyType<PostApiUsersBody> },
    TContext
> => {
    const mutationOptions = getPostApiUsersMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get user by id
 */
export const getApiUsersId = (
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiUsersId200>(
        { url: `/api/users/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiUsersIdQueryKey = (id: string) => {
    return [`/api/users/${id}`] as const;
};

export const getGetApiUsersIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiUsersId>>,
    TError = ErrorType<GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) =>
        getApiUsersId(id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!id,
        staleTime: 10000,
        ...queryOptions,
    } as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData> & {
        queryKey: QueryKey;
    };
};

export type GetApiUsersIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiUsersId>>
>;
export type GetApiUsersIdSuspenseQueryError = ErrorType<
    GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500
>;

export function useGetApiUsersIdSuspense<
    TData = Awaited<ReturnType<typeof getApiUsersId>>,
    TError = ErrorType<GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500>,
>(
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersIdSuspense<
    TData = Awaited<ReturnType<typeof getApiUsersId>>,
    TError = ErrorType<GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersIdSuspense<
    TData = Awaited<ReturnType<typeof getApiUsersId>>,
    TError = ErrorType<GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get user by id
 */

export function useGetApiUsersIdSuspense<
    TData = Awaited<ReturnType<typeof getApiUsersId>>,
    TError = ErrorType<GetApiUsersId401 | GetApiUsersId403 | GetApiUsersId404 | GetApiUsersId500>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiUsersIdSuspenseQueryOptions(id, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Delete user by id
 */
export const deleteApiUsersId = (id: string, options?: SecondParameter<typeof apiInstance>) => {
    return apiInstance<DeleteApiUsersId204>({ url: `/api/users/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiUsersIdMutationOptions = <
    TError = ErrorType<
        DeleteApiUsersId401 | DeleteApiUsersId403 | DeleteApiUsersId404 | DeleteApiUsersId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsersId>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        { id: string }
    > = (props) => {
        const { id } = props ?? {};

        return deleteApiUsersId(id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteApiUsersIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiUsersId>>
>;

export type DeleteApiUsersIdMutationError = ErrorType<
    DeleteApiUsersId401 | DeleteApiUsersId403 | DeleteApiUsersId404 | DeleteApiUsersId500
>;

/**
 * @summary Delete user by id
 */
export const useDeleteApiUsersId = <
    TError = ErrorType<
        DeleteApiUsersId401 | DeleteApiUsersId403 | DeleteApiUsersId404 | DeleteApiUsersId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteApiUsersId>>,
    TError,
    { id: string },
    TContext
> => {
    const mutationOptions = getDeleteApiUsersIdMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Update user by id
 */
export const putApiUsersId = (
    id: string,
    putApiUsersIdBody: BodyType<PutApiUsersIdBody>,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<PutApiUsersId200>(
        {
            url: `/api/users/${id}`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: putApiUsersIdBody,
        },
        options,
    );
};

export const getPutApiUsersIdMutationOptions = <
    TError = ErrorType<
        | PutApiUsersId400
        | PutApiUsersId401
        | PutApiUsersId403
        | PutApiUsersId404
        | PutApiUsersId422
        | PutApiUsersId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiUsersId>>,
        TError,
        { id: string; data: BodyType<PutApiUsersIdBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersId>>,
    TError,
    { id: string; data: BodyType<PutApiUsersIdBody> },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putApiUsersId>>,
        { id: string; data: BodyType<PutApiUsersIdBody> }
    > = (props) => {
        const { id, data } = props ?? {};

        return putApiUsersId(id, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersId>>>;
export type PutApiUsersIdMutationBody = BodyType<PutApiUsersIdBody>;
export type PutApiUsersIdMutationError = ErrorType<
    | PutApiUsersId400
    | PutApiUsersId401
    | PutApiUsersId403
    | PutApiUsersId404
    | PutApiUsersId422
    | PutApiUsersId500
>;

/**
 * @summary Update user by id
 */
export const usePutApiUsersId = <
    TError = ErrorType<
        | PutApiUsersId400
        | PutApiUsersId401
        | PutApiUsersId403
        | PutApiUsersId404
        | PutApiUsersId422
        | PutApiUsersId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putApiUsersId>>,
        TError,
        { id: string; data: BodyType<PutApiUsersIdBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof putApiUsersId>>,
    TError,
    { id: string; data: BodyType<PutApiUsersIdBody> },
    TContext
> => {
    const mutationOptions = getPutApiUsersIdMutationOptions(options);

    return useMutation(mutationOptions);
};
