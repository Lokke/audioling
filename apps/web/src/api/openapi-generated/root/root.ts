/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    QueryFunction,
    QueryKey,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type { GetPing200 } from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Ping the server
 */
export const getPing = (options?: SecondParameter<typeof apiInstance>, signal?: AbortSignal) => {
    return apiInstance<GetPing200>({ url: `/ping`, method: 'GET', signal }, options);
};

export const getGetPingQueryKey = () => {
    return [`/ping`] as const;
};

export const getGetPingSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({ signal }) =>
        getPing(requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPingSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getPing>>>;
export type GetPingSuspenseQueryError = ErrorType<unknown>;

export function useGetPingSuspense<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof apiInstance>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPingSuspense<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof apiInstance>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPingSuspense<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof apiInstance>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ping the server
 */

export function useGetPingSuspense<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof apiInstance>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetPingSuspenseQueryOptions(options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
