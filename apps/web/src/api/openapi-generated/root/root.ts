/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { GetPing200 } from '../audioling-openapi-client.schemas.ts';

/**
 * @summary Ping the server
 */
export const getPing = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetPing200>> => {
    return axios.get(`/ping`, options);
};

export const getGetPingQueryKey = () => {
    return [`/ping`] as const;
};

export const getGetPingQueryOptions = <
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = AxiosError<unknown>,
>(options?: {
    axios?: AxiosRequestConfig;
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({ signal }) =>
        getPing({ signal, ...axiosOptions });

    return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetPingQueryResult = NonNullable<Awaited<ReturnType<typeof getPing>>>;
export type GetPingQueryError = AxiosError<unknown>;

export function useGetPing<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = AxiosError<unknown>,
>(options: {
    axios?: AxiosRequestConfig;
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = AxiosError<unknown>,
>(options?: {
    axios?: AxiosRequestConfig;
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = AxiosError<unknown>,
>(options?: {
    axios?: AxiosRequestConfig;
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ping the server
 */

export function useGetPing<
    TData = Awaited<ReturnType<typeof getPing>>,
    TError = AxiosError<unknown>,
>(options?: {
    axios?: AxiosRequestConfig;
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetPingQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
