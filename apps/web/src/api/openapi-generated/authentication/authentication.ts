/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
    MutationFunction,
    UseMutationOptions,
    UseMutationResult,
} from '@tanstack/react-query';
import type {
    PostAuthRegister204,
    PostAuthRegister500,
    PostAuthRegisterBody,
    PostAuthSignIn200,
    PostAuthSignIn401,
    PostAuthSignIn500,
    PostAuthSignInBody,
    PostAuthSignOut204,
    PostAuthSignOut401,
    PostAuthSignOut500,
    PostAuthSignOutBody,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType, BodyType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Sign in
 */
export const postAuthSignIn = (
    postAuthSignInBody: BodyType<PostAuthSignInBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostAuthSignIn200>(
        {
            url: `/auth/sign-in`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postAuthSignInBody,
            signal,
        },
        options,
    );
};

export const getPostAuthSignInMutationOptions = <
    TData = Awaited<ReturnType<typeof postAuthSignIn>>,
    TError = ErrorType<PostAuthSignIn401 | PostAuthSignIn500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { data: BodyType<PostAuthSignInBody> }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postAuthSignIn'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthSignIn>>,
        { data: BodyType<PostAuthSignInBody> }
    > = (props) => {
        const { data } = props ?? {};

        return postAuthSignIn(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { data: BodyType<PostAuthSignInBody> },
        TContext
    >;
};

export type PostAuthSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignIn>>>;
export type PostAuthSignInMutationBody = BodyType<PostAuthSignInBody>;
export type PostAuthSignInMutationError = ErrorType<PostAuthSignIn401 | PostAuthSignIn500>;

/**
 * @summary Sign in
 */
export const usePostAuthSignIn = <
    TData = Awaited<ReturnType<typeof postAuthSignIn>>,
    TError = ErrorType<PostAuthSignIn401 | PostAuthSignIn500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { data: BodyType<PostAuthSignInBody> }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { data: BodyType<PostAuthSignInBody> }, TContext> => {
    const mutationOptions = getPostAuthSignInMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Sign out
 */
export const postAuthSignOut = (
    postAuthSignOutBody: BodyType<PostAuthSignOutBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostAuthSignOut204>(
        {
            url: `/auth/sign-out`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postAuthSignOutBody,
            signal,
        },
        options,
    );
};

export const getPostAuthSignOutMutationOptions = <
    TData = Awaited<ReturnType<typeof postAuthSignOut>>,
    TError = ErrorType<PostAuthSignOut401 | PostAuthSignOut500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { data: BodyType<PostAuthSignOutBody> }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postAuthSignOut'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthSignOut>>,
        { data: BodyType<PostAuthSignOutBody> }
    > = (props) => {
        const { data } = props ?? {};

        return postAuthSignOut(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { data: BodyType<PostAuthSignOutBody> },
        TContext
    >;
};

export type PostAuthSignOutMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAuthSignOut>>
>;
export type PostAuthSignOutMutationBody = BodyType<PostAuthSignOutBody>;
export type PostAuthSignOutMutationError = ErrorType<PostAuthSignOut401 | PostAuthSignOut500>;

/**
 * @summary Sign out
 */
export const usePostAuthSignOut = <
    TData = Awaited<ReturnType<typeof postAuthSignOut>>,
    TError = ErrorType<PostAuthSignOut401 | PostAuthSignOut500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { data: BodyType<PostAuthSignOutBody> }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { data: BodyType<PostAuthSignOutBody> }, TContext> => {
    const mutationOptions = getPostAuthSignOutMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Register
 */
export const postAuthRegister = (
    postAuthRegisterBody: BodyType<PostAuthRegisterBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostAuthRegister204>(
        {
            url: `/auth/register`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postAuthRegisterBody,
            signal,
        },
        options,
    );
};

export const getPostAuthRegisterMutationOptions = <
    TData = Awaited<ReturnType<typeof postAuthRegister>>,
    TError = ErrorType<PostAuthRegister500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { data: BodyType<PostAuthRegisterBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postAuthRegister'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthRegister>>,
        { data: BodyType<PostAuthRegisterBody> }
    > = (props) => {
        const { data } = props ?? {};

        return postAuthRegister(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { data: BodyType<PostAuthRegisterBody> },
        TContext
    >;
};

export type PostAuthRegisterMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = BodyType<PostAuthRegisterBody>;
export type PostAuthRegisterMutationError = ErrorType<PostAuthRegister500>;

/**
 * @summary Register
 */
export const usePostAuthRegister = <
    TData = Awaited<ReturnType<typeof postAuthRegister>>,
    TError = ErrorType<PostAuthRegister500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { data: BodyType<PostAuthRegisterBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { data: BodyType<PostAuthRegisterBody> }, TContext> => {
    const mutationOptions = getPostAuthRegisterMutationOptions(options);

    return useMutation(mutationOptions);
};
