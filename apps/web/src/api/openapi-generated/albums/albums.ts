/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    DeleteApiLibraryIdAlbumsIdFavorite204,
    DeleteApiLibraryIdAlbumsIdFavorite401,
    DeleteApiLibraryIdAlbumsIdFavorite403,
    DeleteApiLibraryIdAlbumsIdFavorite404,
    DeleteApiLibraryIdAlbumsIdFavorite500,
    GetApiLibraryIdAlbums200,
    GetApiLibraryIdAlbums401,
    GetApiLibraryIdAlbums403,
    GetApiLibraryIdAlbums422,
    GetApiLibraryIdAlbums500,
    GetApiLibraryIdAlbumsCount401,
    GetApiLibraryIdAlbumsCount403,
    GetApiLibraryIdAlbumsCount422,
    GetApiLibraryIdAlbumsCount500,
    GetApiLibraryIdAlbumsCountParams,
    GetApiLibraryIdAlbumsId200,
    GetApiLibraryIdAlbumsId401,
    GetApiLibraryIdAlbumsId403,
    GetApiLibraryIdAlbumsId404,
    GetApiLibraryIdAlbumsId500,
    GetApiLibraryIdAlbumsIdTracks200,
    GetApiLibraryIdAlbumsIdTracks401,
    GetApiLibraryIdAlbumsIdTracks403,
    GetApiLibraryIdAlbumsIdTracks404,
    GetApiLibraryIdAlbumsIdTracks422,
    GetApiLibraryIdAlbumsIdTracks500,
    GetApiLibraryIdAlbumsIdTracksParams,
    GetApiLibraryIdAlbumsParams,
    PostApiLibraryIdAlbumsCountInvalidate204,
    PostApiLibraryIdAlbumsCountInvalidate401,
    PostApiLibraryIdAlbumsCountInvalidate403,
    PostApiLibraryIdAlbumsCountInvalidate422,
    PostApiLibraryIdAlbumsCountInvalidate500,
    PostApiLibraryIdAlbumsIdFavorite204,
    PostApiLibraryIdAlbumsIdFavorite401,
    PostApiLibraryIdAlbumsIdFavorite403,
    PostApiLibraryIdAlbumsIdFavorite404,
    PostApiLibraryIdAlbumsIdFavorite500,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all albums
 */
export const getApiLibraryIdAlbums = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbums200>(
        { url: `/api/${libraryId}/albums`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
) => {
    return [`/api/${libraryId}/albums`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>> = ({
        signal,
    }) => getApiLibraryIdAlbums(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdAlbumsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>
>;
export type GetApiLibraryIdAlbumsQueryError = ErrorType<
    | GetApiLibraryIdAlbums401
    | GetApiLibraryIdAlbums403
    | GetApiLibraryIdAlbums422
    | GetApiLibraryIdAlbums500
>;

export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums
 */

export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>> = ({
        signal,
    }) => getApiLibraryIdAlbums(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>
>;
export type GetApiLibraryIdAlbumsSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbums401
    | GetApiLibraryIdAlbums403
    | GetApiLibraryIdAlbums422
    | GetApiLibraryIdAlbums500
>;

export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums
 */

export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsSuspenseQueryOptions(libraryId, params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get all albums count
 */
export const getApiLibraryIdAlbumsCount = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/albums/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsCountQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
) => {
    return [`/api/${libraryId}/albums/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsCountQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsCount(libraryId, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!libraryId,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdAlbumsCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>
>;
export type GetApiLibraryIdAlbumsCountQueryError = ErrorType<
    | GetApiLibraryIdAlbumsCount401
    | GetApiLibraryIdAlbumsCount403
    | GetApiLibraryIdAlbumsCount422
    | GetApiLibraryIdAlbumsCount500
>;

export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums count
 */

export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsCountQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>
>;
export type GetApiLibraryIdAlbumsCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsCount401
    | GetApiLibraryIdAlbumsCount403
    | GetApiLibraryIdAlbumsCount422
    | GetApiLibraryIdAlbumsCount500
>;

export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums count
 */

export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsCountSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Invalidate album count
 */
export const postApiLibraryIdAlbumsCountInvalidate = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdAlbumsCountInvalidate204>(
        { url: `/api/${libraryId}/albums/count/invalidate`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdAlbumsCountInvalidateMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsCountInvalidate401
        | PostApiLibraryIdAlbumsCountInvalidate403
        | PostApiLibraryIdAlbumsCountInvalidate422
        | PostApiLibraryIdAlbumsCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdAlbumsCountInvalidate'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return postApiLibraryIdAlbumsCountInvalidate(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type PostApiLibraryIdAlbumsCountInvalidateMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>
>;

export type PostApiLibraryIdAlbumsCountInvalidateMutationError = ErrorType<
    | PostApiLibraryIdAlbumsCountInvalidate401
    | PostApiLibraryIdAlbumsCountInvalidate403
    | PostApiLibraryIdAlbumsCountInvalidate422
    | PostApiLibraryIdAlbumsCountInvalidate500
>;

/**
 * @summary Invalidate album count
 */
export const usePostApiLibraryIdAlbumsCountInvalidate = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsCountInvalidate401
        | PostApiLibraryIdAlbumsCountInvalidate403
        | PostApiLibraryIdAlbumsCountInvalidate422
        | PostApiLibraryIdAlbumsCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdAlbumsCountInvalidateMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get album by id
 */
export const getApiLibraryIdAlbumsId = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumsId200>(
        { url: `/api/${libraryId}/albums/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/albums/${id}`] as const;
};

export const getGetApiLibraryIdAlbumsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsId(libraryId, id, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};

export type GetApiLibraryIdAlbumsIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>
>;
export type GetApiLibraryIdAlbumsIdQueryError = ErrorType<
    | GetApiLibraryIdAlbumsId401
    | GetApiLibraryIdAlbumsId403
    | GetApiLibraryIdAlbumsId404
    | GetApiLibraryIdAlbumsId500
>;

export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album by id
 */

export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsId(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>
>;
export type GetApiLibraryIdAlbumsIdSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsId401
    | GetApiLibraryIdAlbumsId403
    | GetApiLibraryIdAlbumsId404
    | GetApiLibraryIdAlbumsId500
>;

export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album by id
 */

export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdSuspenseQueryOptions(libraryId, id, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album tracks by id
 */
export const getApiLibraryIdAlbumsIdTracks = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumsIdTracks200>(
        { url: `/api/${libraryId}/albums/${id}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsIdTracksQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
) => {
    return [`/api/${libraryId}/albums/${id}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsIdTracksQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsIdTracks(libraryId, id, params, requestOptions, signal);

    return {
        queryKey,
        queryFn,
        enabled: !!(libraryId && id),
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdTracksQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>
>;
export type GetApiLibraryIdAlbumsIdTracksQueryError = ErrorType<
    | GetApiLibraryIdAlbumsIdTracks401
    | GetApiLibraryIdAlbumsIdTracks403
    | GetApiLibraryIdAlbumsIdTracks404
    | GetApiLibraryIdAlbumsIdTracks422
    | GetApiLibraryIdAlbumsIdTracks500
>;

export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album tracks by id
 */

export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdTracksQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsIdTracks(libraryId, id, params, requestOptions, signal);

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>
>;
export type GetApiLibraryIdAlbumsIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsIdTracks401
    | GetApiLibraryIdAlbumsIdTracks403
    | GetApiLibraryIdAlbumsIdTracks404
    | GetApiLibraryIdAlbumsIdTracks422
    | GetApiLibraryIdAlbumsIdTracks500
>;

export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album tracks by id
 */

export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdTracksSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Add album favorite by id
 */
export const postApiLibraryIdAlbumsIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdAlbumsIdFavorite204>(
        { url: `/api/${libraryId}/albums/${id}/favorite`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdAlbumsIdFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsIdFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsIdFavorite401
        | PostApiLibraryIdAlbumsIdFavorite403
        | PostApiLibraryIdAlbumsIdFavorite404
        | PostApiLibraryIdAlbumsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdAlbumsIdFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumsIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return postApiLibraryIdAlbumsIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
};

export type PostApiLibraryIdAlbumsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumsIdFavorite>>
>;

export type PostApiLibraryIdAlbumsIdFavoriteMutationError = ErrorType<
    | PostApiLibraryIdAlbumsIdFavorite401
    | PostApiLibraryIdAlbumsIdFavorite403
    | PostApiLibraryIdAlbumsIdFavorite404
    | PostApiLibraryIdAlbumsIdFavorite500
>;

/**
 * @summary Add album favorite by id
 */
export const usePostApiLibraryIdAlbumsIdFavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsIdFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsIdFavorite401
        | PostApiLibraryIdAlbumsIdFavorite403
        | PostApiLibraryIdAlbumsIdFavorite404
        | PostApiLibraryIdAlbumsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string; id: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdAlbumsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove album favorite by id
 */
export const deleteApiLibraryIdAlbumsIdFavorite = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
) => {
    return apiInstance<DeleteApiLibraryIdAlbumsIdFavorite204>(
        { url: `/api/${libraryId}/albums/${id}/favorite`, method: 'DELETE' },
        options,
    );
};

export const getDeleteApiLibraryIdAlbumsIdFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdAlbumsIdFavorite>>,
    TError = ErrorType<
        | DeleteApiLibraryIdAlbumsIdFavorite401
        | DeleteApiLibraryIdAlbumsIdFavorite403
        | DeleteApiLibraryIdAlbumsIdFavorite404
        | DeleteApiLibraryIdAlbumsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['deleteApiLibraryIdAlbumsIdFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteApiLibraryIdAlbumsIdFavorite>>,
        { libraryId: string; id: string }
    > = (props) => {
        const { libraryId, id } = props ?? {};

        return deleteApiLibraryIdAlbumsIdFavorite(libraryId, id, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; id: string },
        TContext
    >;
};

export type DeleteApiLibraryIdAlbumsIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteApiLibraryIdAlbumsIdFavorite>>
>;

export type DeleteApiLibraryIdAlbumsIdFavoriteMutationError = ErrorType<
    | DeleteApiLibraryIdAlbumsIdFavorite401
    | DeleteApiLibraryIdAlbumsIdFavorite403
    | DeleteApiLibraryIdAlbumsIdFavorite404
    | DeleteApiLibraryIdAlbumsIdFavorite500
>;

/**
 * @summary Remove album favorite by id
 */
export const useDeleteApiLibraryIdAlbumsIdFavorite = <
    TData = Awaited<ReturnType<typeof deleteApiLibraryIdAlbumsIdFavorite>>,
    TError = ErrorType<
        | DeleteApiLibraryIdAlbumsIdFavorite401
        | DeleteApiLibraryIdAlbumsIdFavorite403
        | DeleteApiLibraryIdAlbumsIdFavorite404
        | DeleteApiLibraryIdAlbumsIdFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string; id: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string; id: string }, TContext> => {
    const mutationOptions = getDeleteApiLibraryIdAlbumsIdFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
