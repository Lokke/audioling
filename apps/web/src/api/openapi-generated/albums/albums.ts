/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Audioling API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query';
import type {
    GetApiLibraryIdAlbums200,
    GetApiLibraryIdAlbums401,
    GetApiLibraryIdAlbums403,
    GetApiLibraryIdAlbums422,
    GetApiLibraryIdAlbums500,
    GetApiLibraryIdAlbumsCount401,
    GetApiLibraryIdAlbumsCount403,
    GetApiLibraryIdAlbumsCount422,
    GetApiLibraryIdAlbumsCount500,
    GetApiLibraryIdAlbumsCountParams,
    GetApiLibraryIdAlbumsId200,
    GetApiLibraryIdAlbumsId401,
    GetApiLibraryIdAlbumsId403,
    GetApiLibraryIdAlbumsId404,
    GetApiLibraryIdAlbumsId500,
    GetApiLibraryIdAlbumsIdTracks200,
    GetApiLibraryIdAlbumsIdTracks401,
    GetApiLibraryIdAlbumsIdTracks403,
    GetApiLibraryIdAlbumsIdTracks404,
    GetApiLibraryIdAlbumsIdTracks422,
    GetApiLibraryIdAlbumsIdTracks500,
    GetApiLibraryIdAlbumsIdTracksParams,
    GetApiLibraryIdAlbumsParams,
    PostApiLibraryIdAlbumsCountInvalidate204,
    PostApiLibraryIdAlbumsCountInvalidate401,
    PostApiLibraryIdAlbumsCountInvalidate403,
    PostApiLibraryIdAlbumsCountInvalidate422,
    PostApiLibraryIdAlbumsCountInvalidate500,
    PostApiLibraryIdAlbumsFavorite204,
    PostApiLibraryIdAlbumsFavorite401,
    PostApiLibraryIdAlbumsFavorite403,
    PostApiLibraryIdAlbumsFavorite404,
    PostApiLibraryIdAlbumsFavorite500,
    PostApiLibraryIdAlbumsFavoriteBody,
    PostApiLibraryIdAlbumsUnfavorite204,
    PostApiLibraryIdAlbumsUnfavorite401,
    PostApiLibraryIdAlbumsUnfavorite403,
    PostApiLibraryIdAlbumsUnfavorite404,
    PostApiLibraryIdAlbumsUnfavorite500,
    PostApiLibraryIdAlbumsUnfavoriteBody,
} from '../audioling-openapi-client.schemas.ts';
import { apiInstance } from '../../api-instance.ts';
import type { ErrorType, BodyType } from '../../api-instance.ts';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get all albums
 */
export const getApiLibraryIdAlbums = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbums200>(
        { url: `/api/${libraryId}/albums`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
) => {
    return [`/api/${libraryId}/albums`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>> = ({
        signal,
    }) => getApiLibraryIdAlbums(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, enabled: !!libraryId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>
>;
export type GetApiLibraryIdAlbumsQueryError = ErrorType<
    | GetApiLibraryIdAlbums401
    | GetApiLibraryIdAlbums403
    | GetApiLibraryIdAlbums422
    | GetApiLibraryIdAlbums500
>;

export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums
 */

export function useGetApiLibraryIdAlbums<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbums>>> = ({
        signal,
    }) => getApiLibraryIdAlbums(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbums>>
>;
export type GetApiLibraryIdAlbumsSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbums401
    | GetApiLibraryIdAlbums403
    | GetApiLibraryIdAlbums422
    | GetApiLibraryIdAlbums500
>;

export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums
 */

export function useGetApiLibraryIdAlbumsSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbums401
        | GetApiLibraryIdAlbums403
        | GetApiLibraryIdAlbums422
        | GetApiLibraryIdAlbums500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbums>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsSuspenseQueryOptions(libraryId, params, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get all albums count
 */
export const getApiLibraryIdAlbumsCount = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<number>(
        { url: `/api/${libraryId}/albums/count`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsCountQueryKey = (
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
) => {
    return [`/api/${libraryId}/albums/count`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsCountQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, enabled: !!libraryId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>
>;
export type GetApiLibraryIdAlbumsCountQueryError = ErrorType<
    | GetApiLibraryIdAlbumsCount401
    | GetApiLibraryIdAlbumsCount403
    | GetApiLibraryIdAlbumsCount422
    | GetApiLibraryIdAlbumsCount500
>;

export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums count
 */

export function useGetApiLibraryIdAlbumsCount<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsCountQueryOptions(libraryId, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsCountSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsCountQueryKey(libraryId, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsCount(libraryId, params, requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsCountSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>
>;
export type GetApiLibraryIdAlbumsCountSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsCount401
    | GetApiLibraryIdAlbumsCount403
    | GetApiLibraryIdAlbumsCount422
    | GetApiLibraryIdAlbumsCount500
>;

export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all albums count
 */

export function useGetApiLibraryIdAlbumsCountSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsCount401
        | GetApiLibraryIdAlbumsCount403
        | GetApiLibraryIdAlbumsCount422
        | GetApiLibraryIdAlbumsCount500
    >,
>(
    libraryId: string,
    params: GetApiLibraryIdAlbumsCountParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsCount>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsCountSuspenseQueryOptions(
        libraryId,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Invalidate album count
 */
export const postApiLibraryIdAlbumsCountInvalidate = (
    libraryId: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdAlbumsCountInvalidate204>(
        { url: `/api/${libraryId}/albums/count/invalidate`, method: 'POST', signal },
        options,
    );
};

export const getPostApiLibraryIdAlbumsCountInvalidateMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsCountInvalidate401
        | PostApiLibraryIdAlbumsCountInvalidate403
        | PostApiLibraryIdAlbumsCountInvalidate422
        | PostApiLibraryIdAlbumsCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdAlbumsCountInvalidate'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
        { libraryId: string }
    > = (props) => {
        const { libraryId } = props ?? {};

        return postApiLibraryIdAlbumsCountInvalidate(libraryId, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string },
        TContext
    >;
};

export type PostApiLibraryIdAlbumsCountInvalidateMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>
>;

export type PostApiLibraryIdAlbumsCountInvalidateMutationError = ErrorType<
    | PostApiLibraryIdAlbumsCountInvalidate401
    | PostApiLibraryIdAlbumsCountInvalidate403
    | PostApiLibraryIdAlbumsCountInvalidate422
    | PostApiLibraryIdAlbumsCountInvalidate500
>;

/**
 * @summary Invalidate album count
 */
export const usePostApiLibraryIdAlbumsCountInvalidate = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsCountInvalidate>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsCountInvalidate401
        | PostApiLibraryIdAlbumsCountInvalidate403
        | PostApiLibraryIdAlbumsCountInvalidate422
        | PostApiLibraryIdAlbumsCountInvalidate500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<TData, TError, { libraryId: string }, TContext>;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<TData, TError, { libraryId: string }, TContext> => {
    const mutationOptions = getPostApiLibraryIdAlbumsCountInvalidateMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Get album by id
 */
export const getApiLibraryIdAlbumsId = (
    libraryId: string,
    id: string,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumsId200>(
        { url: `/api/${libraryId}/albums/${id}`, method: 'GET', signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsIdQueryKey = (libraryId: string, id: string) => {
    return [`/api/${libraryId}/albums/${id}`] as const;
};

export const getGetApiLibraryIdAlbumsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsId(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, enabled: !!(libraryId && id), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>
>;
export type GetApiLibraryIdAlbumsIdQueryError = ErrorType<
    | GetApiLibraryIdAlbumsId401
    | GetApiLibraryIdAlbumsId403
    | GetApiLibraryIdAlbumsId404
    | GetApiLibraryIdAlbumsId500
>;

export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album by id
 */

export function useGetApiLibraryIdAlbumsId<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>, TError, TData>
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdQueryOptions(libraryId, id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsIdSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdQueryKey(libraryId, id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsId(libraryId, id, requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>
>;
export type GetApiLibraryIdAlbumsIdSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsId401
    | GetApiLibraryIdAlbumsId403
    | GetApiLibraryIdAlbumsId404
    | GetApiLibraryIdAlbumsId500
>;

export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album by id
 */

export function useGetApiLibraryIdAlbumsIdSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsId401
        | GetApiLibraryIdAlbumsId403
        | GetApiLibraryIdAlbumsId404
        | GetApiLibraryIdAlbumsId500
    >,
>(
    libraryId: string,
    id: string,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsId>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdSuspenseQueryOptions(libraryId, id, options);

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Get album tracks by id
 */
export const getApiLibraryIdAlbumsIdTracks = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<GetApiLibraryIdAlbumsIdTracks200>(
        { url: `/api/${libraryId}/albums/${id}/tracks`, method: 'GET', params, signal },
        options,
    );
};

export const getGetApiLibraryIdAlbumsIdTracksQueryKey = (
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
) => {
    return [`/api/${libraryId}/albums/${id}/tracks`, ...(params ? [params] : [])] as const;
};

export const getGetApiLibraryIdAlbumsIdTracksQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsIdTracks(libraryId, id, params, requestOptions, signal);

    return { queryKey, queryFn, enabled: !!(libraryId && id), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdTracksQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>
>;
export type GetApiLibraryIdAlbumsIdTracksQueryError = ErrorType<
    | GetApiLibraryIdAlbumsIdTracks401
    | GetApiLibraryIdAlbumsIdTracks403
    | GetApiLibraryIdAlbumsIdTracks404
    | GetApiLibraryIdAlbumsIdTracks422
    | GetApiLibraryIdAlbumsIdTracks500
>;

export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album tracks by id
 */

export function useGetApiLibraryIdAlbumsIdTracks<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdTracksQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getGetApiLibraryIdAlbumsIdTracksSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiLibraryIdAlbumsIdTracksQueryKey(libraryId, id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>> = ({
        signal,
    }) => getApiLibraryIdAlbumsIdTracks(libraryId, id, params, requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiLibraryIdAlbumsIdTracksSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>
>;
export type GetApiLibraryIdAlbumsIdTracksSuspenseQueryError = ErrorType<
    | GetApiLibraryIdAlbumsIdTracks401
    | GetApiLibraryIdAlbumsIdTracks403
    | GetApiLibraryIdAlbumsIdTracks404
    | GetApiLibraryIdAlbumsIdTracks422
    | GetApiLibraryIdAlbumsIdTracks500
>;

export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get album tracks by id
 */

export function useGetApiLibraryIdAlbumsIdTracksSuspense<
    TData = Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
    TError = ErrorType<
        | GetApiLibraryIdAlbumsIdTracks401
        | GetApiLibraryIdAlbumsIdTracks403
        | GetApiLibraryIdAlbumsIdTracks404
        | GetApiLibraryIdAlbumsIdTracks422
        | GetApiLibraryIdAlbumsIdTracks500
    >,
>(
    libraryId: string,
    id: string,
    params: GetApiLibraryIdAlbumsIdTracksParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getApiLibraryIdAlbumsIdTracks>>,
                TError,
                TData
            >
        >;
        request?: SecondParameter<typeof apiInstance>;
    },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetApiLibraryIdAlbumsIdTracksSuspenseQueryOptions(
        libraryId,
        id,
        params,
        options,
    );

    const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * @summary Add album favorites
 */
export const postApiLibraryIdAlbumsFavorite = (
    libraryId: string,
    postApiLibraryIdAlbumsFavoriteBody: BodyType<PostApiLibraryIdAlbumsFavoriteBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdAlbumsFavorite204>(
        {
            url: `/api/${libraryId}/albums/favorite`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postApiLibraryIdAlbumsFavoriteBody,
            signal,
        },
        options,
    );
};

export const getPostApiLibraryIdAlbumsFavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsFavorite401
        | PostApiLibraryIdAlbumsFavorite403
        | PostApiLibraryIdAlbumsFavorite404
        | PostApiLibraryIdAlbumsFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsFavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdAlbumsFavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumsFavorite>>,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsFavoriteBody> }
    > = (props) => {
        const { libraryId, data } = props ?? {};

        return postApiLibraryIdAlbumsFavorite(libraryId, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsFavoriteBody> },
        TContext
    >;
};

export type PostApiLibraryIdAlbumsFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumsFavorite>>
>;
export type PostApiLibraryIdAlbumsFavoriteMutationBody =
    BodyType<PostApiLibraryIdAlbumsFavoriteBody>;
export type PostApiLibraryIdAlbumsFavoriteMutationError = ErrorType<
    | PostApiLibraryIdAlbumsFavorite401
    | PostApiLibraryIdAlbumsFavorite403
    | PostApiLibraryIdAlbumsFavorite404
    | PostApiLibraryIdAlbumsFavorite500
>;

/**
 * @summary Add album favorites
 */
export const usePostApiLibraryIdAlbumsFavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsFavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsFavorite401
        | PostApiLibraryIdAlbumsFavorite403
        | PostApiLibraryIdAlbumsFavorite404
        | PostApiLibraryIdAlbumsFavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsFavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    TData,
    TError,
    { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsFavoriteBody> },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdAlbumsFavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
/**
 * @summary Remove album favorites
 */
export const postApiLibraryIdAlbumsUnfavorite = (
    libraryId: string,
    postApiLibraryIdAlbumsUnfavoriteBody: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody>,
    options?: SecondParameter<typeof apiInstance>,
    signal?: AbortSignal,
) => {
    return apiInstance<PostApiLibraryIdAlbumsUnfavorite204>(
        {
            url: `/api/${libraryId}/albums/unfavorite`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: postApiLibraryIdAlbumsUnfavoriteBody,
            signal,
        },
        options,
    );
};

export const getPostApiLibraryIdAlbumsUnfavoriteMutationOptions = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsUnfavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsUnfavorite401
        | PostApiLibraryIdAlbumsUnfavorite403
        | PostApiLibraryIdAlbumsUnfavorite404
        | PostApiLibraryIdAlbumsUnfavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}) => {
    const mutationKey = ['postApiLibraryIdAlbumsUnfavorite'];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiLibraryIdAlbumsUnfavorite>>,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody> }
    > = (props) => {
        const { libraryId, data } = props ?? {};

        return postApiLibraryIdAlbumsUnfavorite(libraryId, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions } as UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody> },
        TContext
    >;
};

export type PostApiLibraryIdAlbumsUnfavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiLibraryIdAlbumsUnfavorite>>
>;
export type PostApiLibraryIdAlbumsUnfavoriteMutationBody =
    BodyType<PostApiLibraryIdAlbumsUnfavoriteBody>;
export type PostApiLibraryIdAlbumsUnfavoriteMutationError = ErrorType<
    | PostApiLibraryIdAlbumsUnfavorite401
    | PostApiLibraryIdAlbumsUnfavorite403
    | PostApiLibraryIdAlbumsUnfavorite404
    | PostApiLibraryIdAlbumsUnfavorite500
>;

/**
 * @summary Remove album favorites
 */
export const usePostApiLibraryIdAlbumsUnfavorite = <
    TData = Awaited<ReturnType<typeof postApiLibraryIdAlbumsUnfavorite>>,
    TError = ErrorType<
        | PostApiLibraryIdAlbumsUnfavorite401
        | PostApiLibraryIdAlbumsUnfavorite403
        | PostApiLibraryIdAlbumsUnfavorite404
        | PostApiLibraryIdAlbumsUnfavorite500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        TData,
        TError,
        { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody> },
        TContext
    >;
    request?: SecondParameter<typeof apiInstance>;
}): UseMutationResult<
    TData,
    TError,
    { libraryId: string; data: BodyType<PostApiLibraryIdAlbumsUnfavoriteBody> },
    TContext
> => {
    const mutationOptions = getPostApiLibraryIdAlbumsUnfavoriteMutationOptions(options);

    return useMutation(mutationOptions);
};
