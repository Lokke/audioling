/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardLibraryIdAlbumListImport } from './routes/dashboard/$libraryId/album/list'
import { Route as DashboardLibraryIdAlbumDetailImport } from './routes/dashboard/$libraryId/album/detail'

// Create Virtual Routes

const AuthSignInLazyImport = createFileRoute('/auth/sign-in')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()

// Create/Update Routes

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  path: '/auth/sign-in',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const DashboardLibraryIdAlbumListRoute =
  DashboardLibraryIdAlbumListImport.update({
    path: '/dashboard/$libraryId/album/list',
    getParentRoute: () => rootRoute,
  } as any)

const DashboardLibraryIdAlbumDetailRoute =
  DashboardLibraryIdAlbumDetailImport.update({
    path: '/dashboard/$libraryId/album/detail',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/$libraryId/album/detail': {
      id: '/dashboard/$libraryId/album/detail'
      path: '/dashboard/$libraryId/album/detail'
      fullPath: '/dashboard/$libraryId/album/detail'
      preLoaderRoute: typeof DashboardLibraryIdAlbumDetailImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/$libraryId/album/list': {
      id: '/dashboard/$libraryId/album/list'
      path: '/dashboard/$libraryId/album/list'
      fullPath: '/dashboard/$libraryId/album/list'
      preLoaderRoute: typeof DashboardLibraryIdAlbumListImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/$libraryId/album/detail': typeof DashboardLibraryIdAlbumDetailRoute
  '/dashboard/$libraryId/album/list': typeof DashboardLibraryIdAlbumListRoute
}

export interface FileRoutesByTo {
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/$libraryId/album/detail': typeof DashboardLibraryIdAlbumDetailRoute
  '/dashboard/$libraryId/album/list': typeof DashboardLibraryIdAlbumListRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/$libraryId/album/detail': typeof DashboardLibraryIdAlbumDetailRoute
  '/dashboard/$libraryId/album/list': typeof DashboardLibraryIdAlbumListRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth/register'
    | '/auth/sign-in'
    | '/dashboard'
    | '/dashboard/$libraryId/album/detail'
    | '/dashboard/$libraryId/album/list'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth/register'
    | '/auth/sign-in'
    | '/dashboard'
    | '/dashboard/$libraryId/album/detail'
    | '/dashboard/$libraryId/album/list'
  id:
    | '__root__'
    | '/auth/register'
    | '/auth/sign-in'
    | '/dashboard/'
    | '/dashboard/$libraryId/album/detail'
    | '/dashboard/$libraryId/album/list'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
  AuthSignInLazyRoute: typeof AuthSignInLazyRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardLibraryIdAlbumDetailRoute: typeof DashboardLibraryIdAlbumDetailRoute
  DashboardLibraryIdAlbumListRoute: typeof DashboardLibraryIdAlbumListRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
  AuthSignInLazyRoute: AuthSignInLazyRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardLibraryIdAlbumDetailRoute: DashboardLibraryIdAlbumDetailRoute,
  DashboardLibraryIdAlbumListRoute: DashboardLibraryIdAlbumListRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth/register",
        "/auth/sign-in",
        "/dashboard/",
        "/dashboard/$libraryId/album/detail",
        "/dashboard/$libraryId/album/list"
      ]
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/auth/sign-in": {
      "filePath": "auth/sign-in.lazy.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/dashboard/$libraryId/album/detail": {
      "filePath": "dashboard/$libraryId/album/detail.tsx"
    },
    "/dashboard/$libraryId/album/list": {
      "filePath": "dashboard/$libraryId/album/list.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
